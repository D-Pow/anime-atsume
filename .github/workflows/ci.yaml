name: CI


# TODO Looks like workflows ARE reusable now: https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow
# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


# Specify defaults for all jobs' `run` blocks.
# See:
#   https://github.community/t/use-working-directory-for-entire-job/16747/9
#   https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_iddefaultsrun
#   https://github.community/t/github-actions-configure-defaults-option/18438/3
defaults:
  run:
    shell: bash


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Job 1. Handles everything related to the client/ folder
  ci-client-verify:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Specify defaults for all runs/steps.
    defaults:
      run:
        # Specify directory in which to run all subsequent steps/commands
        #
        # If using a monolith with `./client/` and `./server/` directories:
        # working-directory: ./client
        working-directory: ./client/

    outputs:
      CLIENT_CACHE_ID: ${{ env.CLIENT_CACHE_ID }}
      SERVER_CACHE_ID: ${{ env.SERVER_CACHE_ID }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository branch
        uses: actions/checkout@v3

      - name: CI:Cache name - Init
        uses: ./.github/workflows/actions/cache-name

      - name: CI - Output cache ID
        id: ci-export-cache-id
        run: |
          echo "CLIENT_CACHE_ID=${{ env.CLIENT_CACHE_ID }}" >> $GITHUB_OUTPUT
          echo "SERVER_CACHE_ID=${{ env.SERVER_CACHE_ID }}" >> $GITHUB_OUTPUT

      - name: Client Verify
        # Import pipeline logic via `uses`
        uses: ./.github/workflows/actions/client

  ci-server-verify:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server/
    needs: [ ci-client-verify ]
    env:
      CLIENT_CACHE_ID: ${{ needs.ci-client-verify.outputs.CLIENT_CACHE_ID }}
      SERVER_CACHE_ID: ${{ needs.ci-client-verify.outputs.SERVER_CACHE_ID }}
    steps:
      - name: Checkout repository branch
        uses: actions/checkout@v3
      - name: CI:Cache name - Init
        uses: ./.github/workflows/actions/cache-name
      - name: CI - Output cache ID
        id: ci-export-cache-id
        run: |
          echo "CLIENT_CACHE_ID=${{ env.CLIENT_CACHE_ID }}" >> $GITHUB_OUTPUT
          echo "SERVER_CACHE_ID=${{ env.SERVER_CACHE_ID }}" >> $GITHUB_OUTPUT
      - name: Server Verify
        uses: ./.github/workflows/actions/server

  ci-complete:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    needs: [ ci-client-verify, ci-server-verify ]
    env:
      CLIENT_CACHE_ID: ${{ needs.ci-client-verify.outputs.CLIENT_CACHE_ID }}
      SERVER_CACHE_ID: ${{ needs.ci-client-verify.outputs.SERVER_CACHE_ID }}
    outputs:
      CLIENT_CACHE_ID: ${{ env.CLIENT_CACHE_ID }}
      SERVER_CACHE_ID: ${{ env.SERVER_CACHE_ID }}
    steps:
      # Placeholder command just to allow this step to solely be a aggregate command such that
      # other commands wanting to depend on client/server build completion can have one dependency
      # instead of multiple.
      # Also, re-export env/output vars from other jobs.
      - name: CI:Completed - Aggregate and wait for jobs
        id: ci-complete
        run: |
          echo "CLIENT_CACHE_ID=$CLIENT_CACHE_ID" >> $GITHUB_OUTPUT
          echo "SERVER_CACHE_ID=$SERVER_CACHE_ID" >> $GITHUB_OUTPUT
