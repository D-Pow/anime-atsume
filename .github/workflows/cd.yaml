# Using multiple workflow .yaml files
# https://stackoverflow.com/questions/64009546/how-to-run-multiple-github-actions-workflows-from-sub-directories


# TODO
# Preventing concurrent workflows (e.g. multiple merges to master at once)
# https://github.blog/changelog/2021-04-19-github-actions-limit-workflow-run-or-job-concurrency/
# From: https://github.community/t/how-to-limit-concurrent-workflow-runs/16844/


# If we decide to use Docker - Using local Dockerfile in pipeline:
#   steps:
#   - name: Check out code
#     uses: actions/checkout@v3
#   - name: Build docker images
#     run: docker build -t local < .devcontainer/Dockerfile # .devcontainer is the local path
#   - name: Run tests
#     run: docker run -it -v $PWD:/srv -w/srv local make test
#  OR
#   - name: Build docker images
#     run: docker-compose build
#   - name: Run tests
#     run: docker-compose run test
# Ref: https://stackoverflow.com/questions/61154750/use-local-dockerfile-in-a-github-action


name: CD


# Multiple ways to do this, including:
on:
  workflow_dispatch:
  # Run after CI. Note that this is done here specifically because this repo doesn't utilize GitHub releases.
  workflow_run:
    branches: [ master ]
    workflows: [ 'CI' ]
    types: [ completed ]
  # # 1. Publish your release in GitHub and have your pipeline
  # # react to deploy the package
  # release:
  #   types: [published]

  # 2. Run the pipeline on merge to `master` and do the release/deploy then.
  # pull_request:
  #   types: [ closed ]
  #   branches: [ master ]

  # 3. Run on CI completion (the `if:` in the `deploy` job below would need updating accordingly)
  # workflow_run:
  #   branches: [ master ]
  #   workflows: [ 'CI' ]
  #   types: [ completed ]


defaults:
  run:
    shell: bash


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# Since Render.com isn't configurable and it decides to do whatever it wants, don't (re-)run
# the build/deploy commands here
jobs:
  # cd-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository branch
  #       uses: actions/checkout@v3
  #     - uses: valeriangalliat/action-sshd-cloudflared@v1
  #     - name: Deploy
  #       run: |
  #         ./index.sh dockerBuild

  cd-deploy:
    runs-on: ubuntu-latest
    outputs:
      CLIENT_CACHE_ID: ${{ env.CLIENT_CACHE_ID }}
      SERVER_CACHE_ID: ${{ env.SERVER_CACHE_ID }}
    # Only run on merge to master: https://github.community/t/depend-on-another-workflow/16311/3
    if: ${{ github.event.pull_request.merged || github.ref == 'refs/heads/master' }}
    steps:
      - name: Checkout repository branch
        uses: actions/checkout@v3

      - name: CI:Cache name - Init
        uses: ./.github/workflows/actions/cache-name

      - name: CD - Output cache IDs
        id: cd-export-cache-id
        run: |
          echo "CLIENT_CACHE_ID=${{ env.CLIENT_CACHE_ID }}" >> $GITHUB_OUTPUT
          echo "SERVER_CACHE_ID=${{ env.SERVER_CACHE_ID }}" >> $GITHUB_OUTPUT

      # - name: CD:Server - Download CI output
      #   id: cd-server-download-artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: cd-server-build-output
      #     path: |
      #       ./server/build/libs

      - name: CD:Server - Download CI output
        id: cd-server-download-cache
        uses: actions/cache/restore@v3
        continue-on-error: true
        with:
          path: |
            ./server/build/libs
          key: ${{ env.SERVER_CACHE_ID }}

      # Docker images are relatively large (this simple image is ~2 GB).
      # Also, publishing them to GitHub saves them in the registry, not
      # the repo's packages.
      # Thus, skip Docker build for now.
      # - name: CD:Docker - Build image
      #   id: cd-docker-build-image
      #   uses: ./.github/workflows/actions/docker-publish
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Deploy application to Render.com
      #   run: |
      #     ls -FlAh
      #     ./index.sh deploy
