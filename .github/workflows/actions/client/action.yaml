name: Client - Verify and Build
description: Installs, tests, and builds the front-end


# TODO Once GitHub supports paths in `uses` for reusable workflows instead of
# URLs, then convert this to a workflow.
#
# Make this workflow callable from other workflows.
# Allows special fields only accessible to workflows/jobs (e.g. `defaults`)
# to be used while still offering the portability/reusability of actions.
# See: https://docs.github.com/en/actions/learn-github-actions/reusing-workflows
#
# Can accept inputs and provide outputs - useful for e.g. using the build output
# for a deployment.
# See: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#onworkflow_callinputs
# on: [ workflow_call ]


# Turns out you can't use `inputs` to define values in the YAML file itself.
# Neither `shell: ${{ inputs.shell }}`, `shell: $INPUT_SHELL`, nor `shell: INPUT_SHELL` work.
# So, just resort to duplicating code everywhere until GitHub gets their act together.
#
# inputs:
#   directory:
#     description: Directory in which to run the action
#     required: false
#     default: ./client
#   shell:
#     description: Shell in which to run step.run commands
#     required: false
#     default: bash


runs:
  # Allows the YAML file to be run from other workflows/actions.
  # See:
  #   - https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsusing-1
  using: composite

  # Steps represent a sequence of tasks that will be executed as part of the job
  steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout repository branch
      uses: actions/checkout@v3

    - name: Set NodeJS version
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Client:Cache name - Init
      uses: ./.github/workflows/actions/cache-name

    - name: Client - Download cache
      id: client-build-download-cache
      uses: actions/cache/restore@v3
      continue-on-error: true
      with:
        path: |
          ./client/node_modules
          ./server/src/main/resources/public
        key: ${{ env.CLIENT_CACHE_ID }}

    - name: Client Install
      id: client-install
      if: ${{ failure() || steps.client-build-download-cache.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./client/
      run: |
        npm install

    ## TODO - Add verification for ESLint, Jest, etc.
    # - name: Client Verify
    #   id: client-verify
    #   shell: bash
    #   working-directory: ./
    #   run: |
    #     npm run verify

    - name: Client Build
      # Note: This `if` block must be used on every subsequent step that needs the check
      # because `actions/cache/restore` output var `fail-on-cache-miss` defaults to `false`.
      if: ${{ failure() || steps.client-build-download-cache.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./client/
      run: |
        npm run build

    # - name: Client cache build output
    #   uses: actions/upload-artifact@v3
    #   id: client-build
    #   # Note: `path` is relative to root dir, not working dir
    #   with:
    #     name: client-build-output
    #     path: |
    #       # ./client/node_modules
    #       ./server/src/main/resources/public

    - name: Client - Cache build artifacts
      id: client-build-upload-cache
      if: ${{ failure() || steps.client-build-download-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v3
      with:
        path: |
          ./client/node_modules
          ./server/src/main/resources/public
        key: ${{ env.CLIENT_CACHE_ID }}
