name: Docker - Build and publish
description: Builds and publishes the Docker image to GitHub


# `secrets` is only available in workflows, not actions, even if actions are called
# from a workflow where it's defined
inputs:
  GITHUB_TOKEN:
    description: GitHub token required for modifying branches or artifact publishing.
    required: true
  registryUrlDomain:
    description: Docker registry URL's domain.
    required: true
  imageRetentionDays:
    description: How many days to keep the Docker image artifact in GitHub artifacts.
    required: false
    default: 30


outputs:
  registryUrl:
    description: Docker image registry full URL.
    value: ${{ steps.docker-output-vars.outputs.registryUrl }}
  imageId:
    description: Image ID from build.
    value: ${{ steps.docker-output-vars.outputs.imageId }}
  digest:
    description: Image digest from build.
    value: ${{ steps.docker-output-vars.outputs.digest }}


# See:
#   - https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
runs:
  using: composite
  steps:
    - name: Checkout repository branch
      uses: actions/checkout@v3

    - name: Docker - Cache name init
      uses: ./.github/workflows/actions/cache-name

    - name: Docker - Download client cache
      id: docker-download-client-cache
      uses: actions/cache/restore@v3
      continue-on-error: true
      with:
        path: |
          ./client/node_modules
          ./server/src/main/resources/public
        key: ${{ env.CLIENT_CACHE_ID }}

    - name: Docker - Download server cache
      id: docker-download-server-cache
      uses: actions/cache/restore@v3
      continue-on-error: true
      with:
        path: |
          ./server/build/libs
        key: ${{ env.SERVER_CACHE_ID }}

    # Resulting URL: ghcr.io/D-Pow/anime-atsume
    - name: Docker - Setup env
      id: docker-setup-env
      shell: bash
      run: |
        echo "GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
        echo "imageName=${{ env.REPO_NAME }}" >> $GITHUB_ENV
        # Lowercase the full registry `namespace/imageName` since uppercase isn't allowed in the Docker registry
        imageNameFull="$(echo "${{ github.repository }}" | sed -E 's/./\L&/g')"
        echo "imageNameFull=$imageNameFull" >> $GITHUB_ENV
        echo "registryUrlDomain=${{ inputs.registryUrlDomain }}" >> $GITHUB_ENV
        echo "registryUrl=${{ inputs.registryUrlDomain }}/$imageNameFull" >> $GITHUB_ENV
        echo "imageRetentionDays=${{ inputs.imageRetentionDays }}" >> $GITHUB_ENV

    # - name: Docker - Build
    #   shell: bash
    #   run: |
    #     docker build -t "${{ env.imageName }}" .
    #
    # Setting GITHUB_ENV works between steps but not within multiple commands within one step
    # - name: Docker - Set image and tag name in env
    #   id: docker-set-env-image-tag-name
    #   shell: bash
    #   run: |
    #     echo "dockerImageNameAndTag=$(docker inspect ${{ env.imageName }} | jq -r '.[0].RepoTags[0]')" >> $GITHUB_ENV
    #
    # - name: Docker - Set tags and labels
    #   id: docker-metadata-extract
    #   shell: bash
    #   run: |
    #     echo "tag=$(echo ${{ env.dockerImageNameAndTag }} | sed -E 's/^[^:]+:(.*)/\1/')" >> $GITHUB_ENV
    #     echo "tags=${{ env.dockerImageNameAndTag }}" >> $GITHUB_ENV
    #     echo "labels=${{ env.imageName }}" >> $GITHUB_ENV
    #
    # - name: Docker - Upload image as GitHub artifact
    #   id: docker-upload-image-as-github-artifact
    #   uses: ishworkh/docker-image-artifact-upload@v1
    #   with:
    #     image: "${{ env.dockerImageNameAndTag }}"
    #     retention_days: ${{ env.imageRetentionDays }}

    # Login to the desired Docker registry.
    # Default is Docker hub, but logging into GitHub's/another registry will
    # set it as the publish destination instead.
    - name: Docker - Login to container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.registryUrlDomain }}
        username: ${{ github.actor }}
        password: ${{ env.GITHUB_TOKEN }}

    - name: Docker - Extract metadata (tags, labels)
      id: docker-metadata-extract
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.registryUrl }}

    - name: Docker - Build and push image
      id: docker-build-and-push-image
      uses: docker/build-push-action@v4
      with:
        # Explicitly define GitHub token as an input var since the default is `github.token`
        # and the `github` context isn't available in composite actions.
        github-token: ${{ env.GITHUB_TOKEN }}
        # Setting `context` with a path allows any file modifications from previous steps to be used in this action
        # See: https://github.com/docker/build-push-action#usage
        context: .
        # Toggle whether or not to push to Docker image registry
        # Note: GitHub's registry is different than GitHub packages
        push: true
        # Requires format: org-or-user/repo-name:tag-name
        # If using GitHub's registry, must include the domain, i.e. domainUrl/org-or-user/repo-name:tag-name
        # See:
        #   - Simple example: https://github.com/docker/build-push-action#path-context
        #   - GitHub registry example: https://docs.docker.com/build/ci/github-actions/push-multi-registries/
        tags: |
          ${{ env.registryUrl }}:latest
          ${{ env.registryUrl }}:${{ github.sha }}
        # labels: ${{ env.imageName }}

    - name: Docker - Print output image info
      id: docker-output-vars
      shell: bash
      run: |
        echo "registryUrl=${{ env.registryUrl }}" >> $GITHUB_OUTPUT

        echo "imageId=${{ steps.docker-build-and-push-image.outputs.imageid }}" >> $GITHUB_ENV
        echo "imageId=${{ env.imageId }}" >> $GITHUB_OUTPUT

        echo "digest=${{ steps.docker-build-and-push-image.outputs.digest }}" >> $GITHUB_ENV
        echo "digest=${{ env.digest }}" >> $GITHUB_OUTPUT
