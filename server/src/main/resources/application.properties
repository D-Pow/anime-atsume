# Spring Boot application.properties docs: https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html
#
# Modify these in CLI with:
#   - If running directly from `java (-jar)`:  -Dmy.prop.name=myVal (system props) or --my.prop.name=myVal (app props)
#   - If running from `./gradlew`:  --args="--my.prop.name=myVal"
#   - If running from `docker run`:  -e JAVA_OPTS=-Dmy.prop.name=myVal (can't use --my.prop.name unless it's specifically declared in Dockerfile like JAVA_OPTS is)


# Custom app properties
org.animeatsume.num-attempts-to-bypass-cloudflare=10
org.animeatsume.download-videos=false
org.animeatsume.extract-highest-resolution-video-only=false
org.animeatsume.cache.anime-title-search=animeTitleSearch
org.animeatsume.cache.cache-names=${org.animeatsume.cache.anime-title-search}
org.animeatsume.activate-kissanime=false
org.animeatsume.mock-firefox-user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0
print.env=false


# Multithreading
spring.task.execution.pool.core-size=10
spring.task.execution.pool.max-size=25
spring.task.execution.pool.queue-capacity=50
spring.task.execution.thread-name-prefix=anime-atsume-


# SQLite
# Old version (Spring v2):
#   spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLiteDialect
#   spring.datasource.driver-class-name=org.sqlite.JDBC
spring.datasource.url=jdbc:sqlite:anime_atsume.db
spring.jpa.properties.hibernate.dialect=org.hibernate.community.dialect.SQLiteDialect
# PostgreSQL
#spring.datasource.url=jdbc:postgresql://localhost:5432/anime_atsume
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# MySQL
#spring.datasource.url=jdbc:mysql://localhost:3306/database_name
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Login creds
spring.datasource.username=
spring.datasource.password=
# Show SQL queries being executed - Good for debugging but not for production
#   Possible alternative: hibernate.show_sql=true
#spring.jpa.show-sql=true
# Pretty-print SQL output
spring.jpa.properties.hibernate.format_sql=true
# Automatically create DB schemas, but only if they don't yet exist.
# Contrasted to `spring.jpa.hibernate.ddl-auto` which gives more fine-grained control.
# See:
#   - https://stackoverflow.com/a/73962340/5771107
spring.jpa.generate-ddl=true
# Allow proper lazy-loading of DB entities. See: https://stackoverflow.com/a/48222934/5771107
spring.jpa.open-in-view=false
# Wait till the rest of the app loads before making DB connections, but not quite as lazy/late
# as if they didn't load until first-use by clients
spring.data.jpa.repositories.bootstrap-mode=deferred
# Wait till beans have been fully loaded before starting DB connections
spring.jpa.defer-datasource-initialization=true
# If using the H2 DB, there's a nice viewer available via: https://stackoverflow.com/a/52322709/5771107


# Enables response compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024


# Always color terminal output (default is only when running .jar/.war)
spring.output.ansi.enabled=ALWAYS
# Ignore `resources/templates/` directory since we only use static web assets, not templates
# See: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.servlet.spring-mvc.static-content
spring.groovy.template.check-template-location=false
# Set logging level. Root will trickle down to all others.
# Alternatives include:
#   - logging.level.org.slf4j=info
#   - logging.level.org.springframework.web=info
# See:
#   - https://docs.spring.io/spring-boot/docs/1.2.1.RELEASE/reference/htmlsingle/#boot-features-custom-log-levels
#   - https://stackoverflow.com/questions/20485059/spring-boot-how-can-i-set-the-logging-level-with-application-properties/20488306#20488306
logging.level.root=info


# Timeout - Server-side requests
org.animeatsume.server-side-request-timeout=1s
spring.mvc.async.request-timeout=${org.animeatsume.server-side-request-timeout}
# TODO See if this is the correct one to use
# From: https://stackoverflow.com/a/44485459/5771107
# Or, do it in code: https://stackoverflow.com/questions/13837012/spring-resttemplate-timeout
#server.connection-timeout=5000
server.netty.connection-timeout=${org.animeatsume.server-side-request-timeout}
#spring.graphql.websocket.connection-init-timeout=5s
# Timeout - DB (Cassandra)
#spring.cassandra.request.timeout=1s


# `server.port` is usually the HTTP port, but if SSL configs are set, it auto-converts to HTTPS.
# Add new custom (not defined by Spring) `server.http(s).port` properties to distinguish between them.
server.http.port=${HTTP_PORT:8080}
server.https.port=${HTTPS_PORT:8443}
server.port=${server.https.port}


# Enable HTTP/2 support for more efficient client-server communication.
# Only works over SSL/TLS.
server.http2.enabled=true


# SSL configs for HTTPS support.
# Usually, web hosting platforms will provide this info themselves but it depends on your provider
# and server setup.
#
# Note: You only need to worry about this if (1) your server is a "naive" one that requires you to manually
# open ports and similar modifications (e.g. AWS EC2) and (2) they don't provide their own internal methods
# of SSL setup/you don't use them (e.g. AWS Security Group).
# Or if you want to try HTTPS on `localhost`, then you'll need these configs.
#
# See:
#   - Spring security docs: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.security
#   - Spring SSL docs: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.webserver.configure-ssl
#   - General overview: https://www.thomasvitale.com/https-spring-boot-ssl-certificate
#   - TLS in Spring overview: https://www.baeldung.com/spring-tls-setup
#   - Using LetsEncrypt: https://stackoverflow.com/questions/36991562/how-can-i-set-up-a-letsencrypt-ssl-certificate-and-use-it-in-a-spring-boot-appli/38873138#38873138
#   - Self-signed cert: https://www.baeldung.com/spring-boot-https-self-signed-certificate
#
# Enable support for HTTPS (but doesn't force using it)
server.ssl.enabled=true
# SSL protocol to use
server.ssl.protocol=TLS
# Enabled SSL protocols - Only allow TLS v1.3 since v1.2 is near deprecation and all previous versions already are
server.ssl.enabled-protocols=TLSv1.3
# SSL key/certificate configs
server.ssl.key-store=${SSL_KEY_FILE:classpath:keystore.p12}
server.ssl.key-store-password=${SSL_PASSWORD:password}
server.ssl.keyStoreType=PKCS12
server.ssl.keyAlias=tomcat
#server.ssl.trust-store=${server.ssl.key-store}
#server.ssl.trust-store-password=${server.ssl.key-store-password}
