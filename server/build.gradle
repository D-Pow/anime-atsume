import java.lang.reflect.Field;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.tools.ToolProvider;

import groovy.json.JsonBuilder;

import org.animeatsume.gradleutils.*;


/**
 * To use CLI args in a task/function, append the CLI arg/flag to `-D` or `-P` accordingly:
 *   - System.getProperty()  == ./gradlew myTask -DmyCliArgName='myCliArgValue'
 *   - project.getProperty() == ./gradlew myTask -PmyCliArgName='myCliArgValue'
 * Note: `System.getProperty()` doesn't require a `.hasProperty()` check.
 */

/**
 * Use `tasks.register("myTaskName")` to lazy-load the tasks that aren't needed for global app
 * functionality.
 * i.e. don't run the lifecycle scripts -- including the tasks' top-level configuration information
 * (which is usually always run by default as the Gradle process itself starts, regardless of the
 * specified task) -- until the task is actually needed/called.
 *
 * @see <a href="https://stackoverflow.com/questions/53654190/what-is-the-difference-between-registering-and-creating-in-gradle-kotlin-dsl">StackOverflow post.</a>
 * @see <a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html#sec:how_do_i_defer_creation">Gradle docs for {@code tasks.register()}</a>
 * @see <a href="https://discuss.gradle.org/t/closure-vs-action/37806/2">Tasks ({@code Closures}) vs Actions</a>
 */


plugins {
    id 'java'
    id 'war'
    id 'java-library'  // Provides enum for Java versions. Example: https://docs.gradle.org/current/userguide/custom_plugins.html#:~:text=Example%209.%20Creating%20a%20simple%20script%20plugin
    id 'java-gradle-plugin'  // Add Gradle internal classes to classpath; Necessary to expose classes as `public` classes to the parent/build.gradle files importing this
    id 'groovy'
    id 'application'  // Docs: https://docs.gradle.org/current/userguide/application_plugin.html#sec:application_tasks
    id 'idea'

    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '2.7.4'  // See: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    // If running as a standalone JavaFX app with Java >= v11, add this plugin
    // id 'org.openjfx.javafxplugin' version '0.0.10'

    /*
     * Similar to the below `apply from:` statement, we could write our own custom plugin in
     * a sub-project and apply it here so it's available for use within this Gradle file
     * automatically without us having to specify additional configs.
     */
    // id 'anime-atsume-build-utils'
}

/*
 * Custom utils for Gradle, though as an import/file rather than as a plugin.
 * Necessary if a sub-project's code is used within Gradle files.
 *
 * Alternatively, `buildSrc/` is a reserved dir for (multi-)project-wide configs
 * for use in Gradle.
 *
 * Requires:
 *  - Import statement in file.
 *  - Applying your own custom plugin (even if it's a no-op); otherwise, even code
 *    unrelated to the plugin can't be used in Gradle.
 *  - Adding Gradle's plugin-portal repository for plugin API usage.
 *  - To run sub-projects' tasks, add `dependsOn gradle.includedBuild("sub-project-dir").task(":my-task");` to `tasks.preCompile`
 *
 * If running into issues with discovering/importing sub-project code, try:
 *  - Add `compileClasspath += files('sub-project-dir')` to `sourceSets.main`
 *  - Add `compileOnly project.files('sub-project-dir')` to `dependencies`
 *    Alternatives:
 *      - `compileOnly fileTree('sub-project-dir')`
 *      - `compileOnly 'org.myapp:packagename'`
 */
apply from: "utils/build.gradle"


/* Code was originally written for Java v8 so ensure it can run with these configs */
sourceCompatibility = JavaVersion.VERSION_1_8;
targetCompatibility = JavaVersion.VERSION_1_8;


/**
 * Make all (root + sub-) projects use the same dependency registries via `allprojects`.
 * Alternatively, only the sub-projects can be targeted with `subprojects`.
 *
 * Note: If trying to run your own custom plugin in all sub-projects, you must use the
 * old fashioned `apply from` since `plugins` isn't ready quite yet for handling both
 * the root project and sub-projects.
 *
 * @see <a href="https://stackoverflow.com/questions/12077083/what-is-the-difference-between-allprojects-and-subprojects/12077290#12077290">{@code allprojects} vs {@code subprojects}</a>
 * @see <a href="https://stackoverflow.com/questions/32352816/what-the-difference-in-applying-gradle-plugin/32353244#32353244">{@code plugins} vs {@code apply from}</a>
 */
allprojects {
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()  // For writing our own Gradle plugins
    }
}


/**
 * Adds relevant directories for the app to the global scope.
 *
 * `ext` is more-or-less equivalent to global vars.
 *
 * @see <a href="https://stackoverflow.com/questions/61842857/passing-environment-variables-from-build-gradle-to-custom-plugin/61853116#61853116"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project.extraproperties"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A)"></a>
 */
ext {
    isWindows = System.getProperty("os.name")
        .toLowerCase()
        .startsWith("windows");
    javaHome = "${System.properties['java.home']}";
    javaLibDir = "${javaHome}/lib";

    if (!new File(javaHome).exists()) {
        javaHome = "${JAVA_HOME}" || System.getenv('JAVA_HOME');
    }

    if (!new File(javaLibDir).exists()) {
        javaLibDir = "${javaHome}/../lib";
    }

    repoRootDirPath = new File("${project.projectDir.toString().trim()}/..").getCanonicalPath();

    try {
        _repoRootDirPathViaGit = cliCmd("git rev-parse --show-toplevel").toString().trim();

        if (_repoRootDirPathViaGit != null && _repoRootDirPathViaGit.length > 0) {
            repoRootDirPath = _repoRootDirPathViaGit;
        }
    } catch (e) {}

    clientDirPath = "${repoRootDirPath}/client";
    clientDirDepsPath = "${clientDirPath}/node_modules";
    serverDirPath = "${projectDir}";
    serverWebAssetDirPath = "${serverDirPath}/src/main/resources/public";
    warOutputDir = "${project.buildDir}/${project.libsDirName}";  // `currentDir/build/libs/` by default
    dbName = 'anime_atsume.db';
    buildUtilsDir = "${serverDirPath}/utils";
    buildUtilsGradleConfig = "${buildUtilsDir}/build.gradle";
    buildUtilsJars = fileTree("${buildUtilsDir}/build/libs") {
        include("*.jar");
        exclude("*sources.jar");
    }
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}


/**
 *  - `implementation` = Adds to build output and classpath. Required to run your code but
 *      isn't needed during compilation. Try to use this most of the time.
 *  - `compileOnly` = Doesn't add to build output but does add to classpath. Only needed to
 *      compile your code. e.g. Decorators, JavaFX, etc.
 *  - `api` = Somewhat of a middle-ground between `implementation` and `compileOnly` (replaced `compile`).
 *      Usually only used in library modules. Exposes dependency to consumers of the module.
 *      Try to avoid this as it increases build time significantly when many are specified and consumers
 *      should specify whatever dependencies they need themselves rather than relying on yours.
 *  - `runtimeOnly` - Don't even build the dependency, just inject it in the resulting build output.
 *  - `compile` - Deprecated. Same as thing as `api`.
 *
 * @see <a href="https://stackoverflow.com/questions/47365119/gradle-dependency-configuration-implementation-vs-api-vs-runtimeonly-vs-compil/47365147#47365147">SO post explaining dependency tags</a>
 * @see <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">Gradle "Dependency management" docs</a>
 * @see <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph">Gradle illustration of dependencies</a>
 * @see <a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:dependency-types">Gradle explanation of types dependencies</a>
 */
dependencies {
    // JavaFX was removed in Java 11 so ensure it's installed (uses OpenJDK)
    implementation 'org.openjfx:javafx:18.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok:1.18.24'

    // implementation 'mysql:mysql-connector-java'
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation 'com.github.gwenn:sqlite-dialect:0.1.0'

    // HTML parser
    implementation 'org.jsoup:jsoup:1.15.3'

    /*
     * Need a webdriver library to load and scrape Kissanime pages.
     * Options for webdriver libraries: https://gist.github.com/alexislucena/ce3bdccf334f5cd0da41920725947b5c
     *
     * Decided to use [ui4j](https://webfolderio.github.io/ui4j/) because it's lightweight
     * in comparison to Selenium and uses native Java unlike PhantomJS.
     * Using v3.0.0 because it ironically has more features than 4.0.0
     * (see https://github.com/webfolderio/ui4j/tree/3.0.0)
     */
    implementation 'io.webfolder:ui4j-webkit:3.0.0'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    /**
     * Not sure exactly why but occasionally `java/lib/tools.jar` won't be loaded (at least on Mac).
     * Thus, load it dynamically via the native Java API.
     * Likely due to certain features used in this `build.gradle` file, but still obviously necessary.
     *
     * @see <a href="https://stackoverflow.com/questions/25626757/correct-way-of-referencing-tools-jar-in-a-cross-platform-way/25628156#25628156">Handling {@code Cannot find "tools.jar"} errors.</a>
     */
    compileOnly files(Optional
        .ofNullable((URLClassLoader) ToolProvider.getSystemToolClassLoader())
        .map(urlClassLoader -> urlClassLoader.getURLs()) // `.ifPresent()` doesn't work since it returns void
        .orElse(new String[] { "${javaLibDir}/tools.jar" })
    )

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}


if (System.properties['jfxrtDir'] == null) { // if not in root-level gradle.properties
    System.properties['jfxrtDir'] = '.'
}


tasks.register("buildFrontend") {
    doLast {
        buildFrontendIfNotPresent();
    }
}


configurations.all {
    /*
     * Fixes an error where `logback` is considered to have duplicate files.
     *
     * Alternatives:
     *   - exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
     *   - exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
     *   - exclude module: 'slf4j-log4j14'
     *
     * @see <a href="https://discuss.gradle.org/t/gradle-7-fail-for-duplicates-in-copy-specs-has-no-duplicates-in-project/39834">Fixing Gradle duplicate files issue</a>
     * @see <a href="https://stackoverflow.com/questions/12926899/java-lang-noclassdeffounderror-org-slf4j-loggerfactory">{@code NoClassDefFoundError: org.slf4j.LoggerFactory} error</a>
     * @see <a href="https://stackoverflow.com/questions/44111973/slf4j-loggerfactory-class-definition-not-found-with-gradle">SO: Similar question</a>
     * @see <a href="https://stackoverflow.com/questions/42531127/gradle-exception-in-thread-main-java-lang-noclassdeffounderror-org-slf4j-logg">SO: Similar question</a>
     * @see <a href="https://stackoverflow.com/questions/40033235/how-to-properly-configure-gradle-build-to-avoid-including-log4j-and-slf4j-from-t">SO: Possible solution</a>
     * @see <a href="https://discuss.gradle.org/t/gradle-7-fail-for-duplicates-in-copy-specs-has-no-duplicates-in-project/39834">Gradle discussion</a>
     * @see <a href="https://github.com/gradle/gradle/issues/17236">GitHub issue</a>
     */
    exclude group: 'ch.qos.logback', module: 'logback-classic'
}


/**
 * Not used, but this code would create a JAR file instead of a WAR file.
 * JAR files can run by themselves whereas WAR files require running in a Tomcat container.
 *
 * <pre>
 * bootJar {
 *     archiveBaseName = project.name
 *     archiveVersion = project.version
 * }
 * </pre>
 */

/**
 * Also not used, but `jar` causes a .jar file to be generated instead of a .war file.
 *
 * However, with the code changes made to spit Gradle utils into a separate sub-project,
 * this resulted in a `X-plain.jar` (and sometimes a `X-plain.war` file as well) to be
 * generated even though we only care about the "normal" .war file.
 *
 * Disabling these tasks solves that issue.
 *
 * @see <a href="https://stackoverflow.com/questions/71060229/after-upgrading-to-gradle-7-x-generating-two-war-files/71074994#71074994">SO post solving the issue</a>
 * @see <a href="https://stackoverflow.com/questions/30728533/gradle-override-transitive-dependency-by-version-classifier">Alternative: Forcing {@code slf4j} version</a>
 * @see <a href="https://discuss.gradle.org/t/forcing-a-dependency-still-takes-latest-version/2050/3">Docs: Forcing {@code slf4j} version</a>
 * @see <a href="https://stackoverflow.com/questions/67663728/spring-boot-2-5-0-generates-plain-jar-file-can-i-remove-it/67663956#67663956">Solution</a>
 */
jar {
    enabled = false
    // archiveClassifier = ""  // Occasionally necessary
}

war {
    enabled = false
}


/**
 * Build, run, etc. all depend on the `compileJava` task.
 * As such, to ensure the front-end was built before attempting to run the server,
 * it needs to be specified as a dependency.
 *
 * Note: This is different than `doFirst` in that `dependsOn` runs before the "configuration"
 * lifecycle method (what's run in the top-level of a task) which is run before the "doFirst"
 * lifecycle method.
 *
 * Also, the syntax here is just the new/recommended syntax rather than just plain name-declarations
 * at the top-level of the file.
 */

/**
 * {@inheritDoc}
 */
tasks.register("preCompile") {
    dependsOn "buildFrontend";  // Same as `tasks.<my-task>.dependsOn([ "someTask" ])`
}

tasks.compileJava.dependsOn([ "preCompile" ]);


/**
 * Note: Allow the Spring tasks to be eagerly-loaded since they they are in Spring itself.
 * Also, {@code tasks.register()} doesn't allow overriding tasks.
 */

/**
 * {@inheritDoc}
 */
bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

tasks.run.dependsOn([ "bootRun" ]);

/**
 * {@inheritDoc}
 * WAR is needed because JAR doesn't include {@link resources.public resources/public/}
 * Spring disables {@code war} task and replaces it with {@code bootWar}
 */
bootWar {
    enabled = true;  // Required due to above deactivation of the `war` task

    doFirst {  // Run in `doFirst` rather than config step to avoid race conditions with `gradle.rootProject.setVersion()`
        archiveBaseName = project.name
        // archiveVersion = project.version  // Don't add `project.version` to output .war file name
    }

    if (injectJavaFxJar.toBoolean()) {
        /*
         * Add JavaFX's .jar file to classpath to bundle it with the app.
         *
         * Allows website hosting systems that don't support JavaFX to
         * run this webapp.
         *
         * Could also be done in dependencies: `implementation project.files(javaFxAbsolutePath)`
         * but was put here instead to keep the actual app's dependencies separated from
         * the dependencies that *should* already be on the host's system.
         */
        def javaFxAbsolutePath = getJavaFxJarPath()
        classpath(javaFxAbsolutePath)
        println("Injected JavaFX .jar file to dependencies from ${javaFxAbsolutePath}")
    }

    doLast {
        copyDbToBuildDir();

        cliCmd("chmod 777 ${warOutputDir}/*")
    }
}


/**
 * {@inheritDoc}
 * Run specific test using {@code gradle test --tests <TestClassName, e.g. _11_>}
 */
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}


/**
 * {@inheritDoc}
 * Configures JavaDoc generation by specifying the main class and the app's {@code classpath}.
 *
 * @see <a href="https://stackoverflow.com/questions/45997976/how-generate-javadoc-with-gradle">StackOverflow post</a>
 */
javadoc {
    source = sourceSets.main.allJava
    // classpath = configurations.compile
}


/**
 * Ensure sub-projects maintain their own name and version vs being overwritten by this
 * super-project's name and version.
 *
 * @see <a href="https://stackoverflow.com/questions/53185588/gradle-get-subporject-name-version/53185758#53185758">SO: Post discussing this</a>
 */
gradle.projectsEvaluated {
    subprojects { subproject ->
        jar {
            manifest {
                attributes(
                    Name: subproject.archivesBaseName,
                    Version: subproject.version,
                    // '<package.mainClass>',
                )
            }
        }
    }
}


wrapper { // TODO - Move to files.groovy
    distributionType = Wrapper.DistributionType.ALL
}

tasks.register("wrapperVersion") {
    doLast {
        String allGradleVersionsResponse = cliCmd("curl -fsSL 'https://gradle.org/releases' | grep -Eo 'v([0-9]+\\.){1,3}[0-9]*\\W' | sed -E 's/^v([0-9\\.]*).?\$/\\1/' | sort -Vur");
        List<String> allGradleVersions = allGradleVersionsResponse.split("\n");
        println("allGradleVersionsResponse: ${allGradleVersionsResponse}")

        String wrapperVersionNumber = allGradleVersions.get(0);

        if (project.hasProperty("v")) {
            wrapperVersionNumber = project.getProperty("v");
        } else if (System.hasProperty("v")) {
            wrapperVersionNumber = System.getProperty("v");
        }

        // TODO - Only upgrade if `-Pu` is passed

        println("Upgrading Gradle wrapper to v${wrapperVersionNumber}");
        // See: https://gradle.org/install#with-the-gradle-wrapper
        cliCmd("./gradlew wrapper --distribution-type=bin --gradle-version=${wrapperVersionNumber}")
    }
}
