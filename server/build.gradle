plugins {
    id 'java'
    id 'idea'
    id 'war'
    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group 'org.animeatsume'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task printVersion {
    println rootProject.artifacts
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok'

//    implementation 'mysql:mysql-connector-java'
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation 'com.github.gwenn:sqlite-dialect:0.1.0'

    /*
     * Need a webdriver library to load and scrape Kissanime pages.
     * Options for webdriver libraries: https://gist.github.com/alexislucena/ce3bdccf334f5cd0da41920725947b5c
     *
     * Decided to use [ui4j](https://webfolderio.github.io/ui4j/) because it's lightweight
     * in comparison to Selenium and uses native Java unlike PhantomJS.
     * Using v3.0.0 because it ironically has more features than 4.0.0
     * (see https://github.com/webfolderio/ui4j/tree/3.0.0)
     */
//    implementation 'io.webfolder:ui4j-webkit:3.0.0'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}

if (System.properties['jfxrtDir'] == null) { // if not in root-level gradle.properties
    System.properties['jfxrtDir'] = '.'
}

def searchFile(Map<String, Closure> places, List<String> searchPaths, String searchID) {
    File result = null;
    places.each { k, v ->
        if (result != null) return;
        project.logger.debug("Looking for $searchID in $k")
        def dir = v()
        if (dir == null) {
            project.logger.debug("$k not set")
        } else {
            project.logger.debug("$k is $dir")
            searchPaths.each { s ->
                if (result != null) return;
                File f = new File(dir, s);
                project.logger.debug("Trying $f.path")
                if (f.exists() && f.file) {
                    project.logger.debug("found $searchID as $result")
                    result = f;
                }
            }
        }
    }
    if (!result?.file) {
        throw new GradleException("Could not find $searchID, please set one of ${places.keySet()}");
    } else {
        project.logger.info("$searchID: ${result}")
        return result
    }
}

def findJavaFxJar() {
    return searchFile(
        [
            'jfxrtDir in Gradle Properties': { System.properties['jfxrtDir'] },
            'JFXRT_HOME in System Environment': { System.getenv('JFXRT_HOME') },
            'JAVA_HOME in System Environment': { System.getenv('JAVA_HOME') },
            'java.home in JVM properties': { System.properties['java.home'] }
        ],
        [
            'jfxrt.jar',
            'lib/jfxrt.jar',
            'lib/ext/jfxrt.jar',
            'jre/lib/jfxrt.jar',
            'jre/lib/ext/jfxrt.jar'
        ],
        'JavaFX Runtime Jar'
    )
}

def findAntJavaFxJar() {
    return searchFile(
        [
            'jfxrtDir in Gradle Properties': { System.properties['jfxrtDir'] },
            'JFXRT_HOME in System Environment': { System.getenv('JFXRT_HOME') },
            'JAVA_HOME in System Environment': { System.getenv('JAVA_HOME') },
            'java.home in JVM properties': { System.properties['java.home'] }
        ],
        [
            'ant-javafx.jar',
            'lib/ant-javafx.jar',
            '../lib/ant-javafx.jar'
        ],
        'JavaFX Packager Tools'
    )
}

def getJavaFxJarPath() {
    return file(findJavaFxJar()).absolutePath
}

def copyDbToBuildDir() {
    def warOutputDir = "${project.buildDir}/${project.libsDirName}"
    def dbName = 'anime_atsume.db'

    copy {
        from dbName
        into warOutputDir
    }

    println("Copied ${dbName} to ${warOutputDir}")
}

// WAR is needed because JAR doesn't include resources/public/
// Spring disables `war` task and replaces it with `bootWar`
bootWar {
    archiveBaseName = project.name
    archiveVersion = project.version

    if (injectJavaFxJar.toBoolean()) {
        /*
         * Add JavaFX's .jar file to classpath to bundle it with the app.
         *
         * Allows website hosting systems that don't support JavaFX to
         * run this webapp.
         *
         * Could also be done in dependencies: `implementation project.files(javaFxAbsolutePath)`
         * but was put here instead to keep the actual app's dependencies separated from
         * the dependencies that *should* already be on the host's system.
         */
        def javaFxAbsolutePath = getJavaFxJarPath()
        classpath(javaFxAbsolutePath)
        println("Injected JavaFX .jar file to dependencies from ${javaFxAbsolutePath}")
    }

    doLast {
        copyDbToBuildDir()
    }
}

// Creates a JAR that can run by itself instead of a WAR that requires running in a Tomcat container
//bootJar {
//    archiveBaseName = project.name
//    archiveVersion = project.version
//}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

//Run specific test using `gradle test --tests <TestClassName, e.g. _11_>`
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

wrapper {
    gradleVersion = '6.5'
    distributionType = Wrapper.DistributionType.ALL
}
