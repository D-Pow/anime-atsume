import java.lang.reflect.Field;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.tools.ToolProvider

plugins {
    id 'java'
    id 'idea'
    id 'war'
    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    // If running as a standalone JavaFX app with Java >= v11, add this plugin
    // id 'org.openjfx.javafxplugin' version '0.0.10'
}

/* Code was originally written for Java v8 so ensure it can run with these configs */
sourceCompatibility = 1.8
targetCompatibility = 1.8

/**
 * Adds relevant directories for the app to the global scope.
 *
 * `ext` is more-or-less equivalent to global vars.
 *
 * @see <a href="https://stackoverflow.com/questions/61842857/passing-environment-variables-from-build-gradle-to-custom-plugin/61853116#61853116"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project.extraproperties"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A)"></a>
 */
ext {
    javaHome = "${System.properties['java.home']}"

    if (!new File(javaHome).exists()) {
        javaHome = "${JAVA_HOME}" || System.getenv('JAVA_HOME');
    }

    javaLibDir = "${javaHome}/lib";

    if (!new File(javaLibDir).exists()) {
        javaLibDir = "${javaHome}/../lib";
    }

    rootDirPath = cliCmd("git rev-parse --show-toplevel");
    serverDirPath = "${projectDir}";
    clientDirPath = "${serverDirPath}/../client";
    clientDirDepsPath = "${clientDirPath}/node_modules";
    serverWebAssetDirPath = "${serverDirPath}/src/main/resources/public";
    warOutputDir = "${project.buildDir}/${project.libsDirName}";
    dbName = 'anime_atsume.db';
}

/**
 * Use `tasks.register("myTaskName")` to lazy-load the tasks that aren't needed for global app
 * functionality.
 * i.e. don't run the lifecycle scripts -- including the tasks' top-level configuration information
 * (which is usually always run by default as the Gradle process itself starts, regardless of the
 * specified task) -- until the task is actually needed/called.
 *
 * @see <a href="https://stackoverflow.com/questions/53654190/what-is-the-difference-between-registering-and-creating-in-gradle-kotlin-dsl">StackOverflow post.</a>
 * @see <a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html#sec:how_do_i_defer_creation">Gradle docs for {@code tasks.register()}</a>
 * @see <a href="https://discuss.gradle.org/t/closure-vs-action/37806/2">Tasks ({@code Closures}) vs Actions</a>
 */

tasks.register("printVersion") {
    println rootProject.artifacts
}

tasks.register("printCommands") {
    /**
     * Alternatives:
     *  - {@code configurations.forEach(config -> { println(config.name); });}
     *  - {@code ./gradlew --console plain dependencies 2>/dev/null | grep -Eio '^[a-z]+ - .*'}
     *
     * @see <a href="https://stackoverflow.com/questions/38362977/how-to-list-all-tasks-for-the-master-project-only-in-gradle/40188539#40188539">List all Gradle tasks</a>
     * @see <a href="https://stackoverflow.com/questions/41173616/how-can-i-get-a-list-of-all-configurations-for-a-gradle-project">List all Gradle configurations</a>
     */
    doLast {
        println(cliCmd("./gradlew -q tasks --all"));
    }
}


repositories {
    mavenCentral()
}

dependencies {
    // JavaFX was removed in Java 11 so ensure it's installed (uses OpenJDK)
    implementation 'org.openjfx:javafx:18.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok:1.18.24'

    // implementation 'mysql:mysql-connector-java'
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation 'com.github.gwenn:sqlite-dialect:0.1.0'

    // HTML parser
    implementation 'org.jsoup:jsoup:1.13.1'

    /*
     * Need a webdriver library to load and scrape Kissanime pages.
     * Options for webdriver libraries: https://gist.github.com/alexislucena/ce3bdccf334f5cd0da41920725947b5c
     *
     * Decided to use [ui4j](https://webfolderio.github.io/ui4j/) because it's lightweight
     * in comparison to Selenium and uses native Java unlike PhantomJS.
     * Using v3.0.0 because it ironically has more features than 4.0.0
     * (see https://github.com/webfolderio/ui4j/tree/3.0.0)
     */
    implementation 'io.webfolder:ui4j-webkit:3.0.0'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    /**
     * Not sure exactly why but occasionally `java/lib/tools.jar` won't be loaded (at least on Mac).
     * Thus, load it dynamically via the native Java API.
     * Likely due to certain features used in this `build.gradle` file, but still obviously necessary.
     *
     * @see <a href="https://stackoverflow.com/questions/25626757/correct-way-of-referencing-tools-jar-in-a-cross-platform-way/25628156#25628156">Handling {@code Cannot find "tools.jar"} errors.</a>
     */
    compileOnly files(Optional
        .ofNullable((URLClassLoader) ToolProvider.getSystemToolClassLoader())
        .map(urlClassLoader -> urlClassLoader.getURLs()) // `.ifPresent()` doesn't work since it returns void
        .orElse(new String[] { "${javaLibDir}/tools.jar" })
    )

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}


def objectEntries(obj) {
    /**
     * @see <a href="https://stackoverflow.com/questions/13400075/reflection-generic-get-field-value"></a>
     * @see <a href="https://www.geeksforgeeks.org/reflection-in-java"></a>
     * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-"></a>
     */
    Class<?> objClass = obj.getClass();
    Field[] objFields = objClass.getDeclaredFields();

    // Alternatives:
    // - Arrays.asList(objFields)
    Map<String, String> entriesMap = new HashMap<>();

    for (Field field : objFields) {
        String fieldSuffix = field.toString().replaceAll("(^.*)(\\.)([^\\.]+)\$", "\$3");

        field.setAccessible(true);
        entriesMap.put(fieldSuffix, field.get(obj));
    }

    return entriesMap;
}

def cliCmd(String[] commandAndArgs) {
    /**
     * Alternatives:
     *  - {@code org.apache.commons.lang.StringUtils.join()}
     *
     * @see <a href="https://stackoverflow.com/questions/159148/groovy-executing-shell-commands">Run terminal commands from Gradle script</a>
     * @see <a href="https://stackoverflow.com/questions/52389713/execute-bash-command-in-a-gradle-function">Running Bash commands in Gradle</a>
     */
    String cmd = Arrays.stream(commandAndArgs)
        .map(String::valueOf)
        .collect(Collectors.joining(" "))
    ;

    /**
     * Alternatives:
     *  - {@code commandLine(cmd)}
     *  - {@code executeCommand(cmd)}
     *  - {@code (Below with or without `.waitFor()`)}
     *  - {@code new String(cmd.execute()[.getOutputStream()|.toByteArray()][.toByteArray()])}
     *  - They may or may not require:
     *      + {@code .text.trim()}
     *      + {@code .consumeProcessOutput(stdOut, stdErr)} // Assuming the args are instances of {@code StringBuilder}
     *      + {@code .waitForProcessOutput(stdOut, stdErr)}
     *      + {@code new OutputStreamWriter(subProcess.[functionFromAbove]()).toString()}
     */
    def subProcess = cmd.execute();
    def subProcessStdOut = subProcess.getText().trim();

    return subProcessStdOut;
}


if (System.properties['jfxrtDir'] == null) { // if not in root-level gradle.properties
    System.properties['jfxrtDir'] = '.'
}

def searchFile(Map<String, Closure> places, List<String> searchPaths, String searchID) {
    File result = null;
    places.each { k, v ->
        if (result != null) return;
        project.logger.debug("Looking for $searchID in $k")
        def dir = v()
        if (dir == null) {
            project.logger.debug("$k not set")
        } else {
            project.logger.debug("$k is $dir")
            searchPaths.each { s ->
                if (result != null) return;
                File f = new File(dir, s);
                project.logger.debug("Trying $f.path")
                if (f.exists() && f.file) {
                    project.logger.debug("found $searchID as $result")
                    result = f;
                }
            }
        }
    }
    if (!result?.file) {
        throw new GradleException("Could not find $searchID, please set one of ${places.keySet()}");
    } else {
        project.logger.info("$searchID: ${result}")
        return result
    }
}

def findJavaFxJar() {
    return searchFile(
        [
            'jfxrtDir in Gradle Properties': { System.properties['jfxrtDir'] },
            'JFXRT_HOME in System Environment': { System.getenv('JFXRT_HOME') },
            'JAVA_HOME in System Environment': { System.getenv('JAVA_HOME') },
            'java.home in JVM properties': { System.properties['java.home'] }
        ],
        [
            'jfxrt.jar',
            'lib/jfxrt.jar',
            'lib/ext/jfxrt.jar',
            'jre/lib/jfxrt.jar',
            'jre/lib/ext/jfxrt.jar'
        ],
        'JavaFX Runtime Jar'
    )
}

def findAntJavaFxJar() {
    return searchFile(
        [
            'jfxrtDir in Gradle Properties': { System.properties['jfxrtDir'] },
            'JFXRT_HOME in System Environment': { System.getenv('JFXRT_HOME') },
            'JAVA_HOME in System Environment': { System.getenv('JAVA_HOME') },
            'java.home in JVM properties': { System.properties['java.home'] }
        ],
        [
            'ant-javafx.jar',
            'lib/ant-javafx.jar',
            '../lib/ant-javafx.jar'
        ],
        'JavaFX Packager Tools'
    )
}

def getJavaFxJarPath() {
    return file(findJavaFxJar()).absolutePath
}

def copyDbToBuildDir() {
    copy {
        from dbName
        into warOutputDir
    }

    println("Copied ${dbName} to ${warOutputDir}")
}


def buildFrontendIfNotPresent() {
    /**
     * Alternatives for printing the `project` object:
     *     - {@code import groovy.json.JsonBuilder[.toPrettyString(project)]}
     *     - {@code import groovy.json.JsonOutput[.prettyPrint(project)]}
     */
    def serverWebAssetDir = new File(serverWebAssetDirPath);

    if (!serverWebAssetDir.exists() || serverWebAssetDir.list().size() == 0) {
        println("Client build output directory ${serverWebAssetDirPath} doesn't exist. Building the front-end now...");

        serverWebAssetDir.mkdirs();

        def clientDirDeps = new File(clientDirDepsPath);

        if (!clientDirDeps.exists() || clientDirDeps.list().size() == 0) {
            println("Client-side dependencies directory ${clientDirDepsPath} doesn't exist. Creating it now...");

            clientDirDeps.mkdirs();
            cliCmd(
                "cd ${rootDirPath}",
                "which node &>/dev/null || ./install-nvm.sh",
                "cd ${clientDirPath}",
                "npm install",
                "npm run build"
            );
        }
    }
}

tasks.withType(Copy).all {
    duplicatesStrategy 'include'
}


/**
 * Build, run, etc. all depend on the `compileJava` task.
 * As such, to ensure the front-end was built before attempting to run the server,
 * it needs to be specified as a dependency.
 *
 * Note: This is different than `doFirst` in that `dependsOn` runs before the "configuration"
 * lifecycle method (what's run in the top-level of a task) which is run before the "doFirst"
 * lifecycle method.
 *
 * Also, the syntax here is just the new/recommended syntax rather than just plain name-declarations
 * at the top-level of the file.
 */

/**
 * {@inheritDoc}
 */
tasks.register("preCompile") {
    doFirst {
        buildFrontendIfNotPresent();
    }
    buildFrontendIfNotPresent();
}

tasks.compileJava.dependsOn([ "preCompile" ]);


/**
 * Note: Allow the Spring tasks to be eagerly-loaded since they they are in Spring itself.
 * Also, {@code tasks.register()} doesn't allow overriding tasks.
 */

/**
 * {@inheritDoc}
 */
bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

/**
 * {@inheritDoc}
 * WAR is needed because JAR doesn't include {@link resources.public resources/public/}
 * Spring disables {@code war} task and replaces it with {@code bootWar}
 */
bootWar {
    archiveBaseName = project.name
    archiveVersion = project.version

    if (injectJavaFxJar.toBoolean()) {
        /*
         * Add JavaFX's .jar file to classpath to bundle it with the app.
         *
         * Allows website hosting systems that don't support JavaFX to
         * run this webapp.
         *
         * Could also be done in dependencies: `implementation project.files(javaFxAbsolutePath)`
         * but was put here instead to keep the actual app's dependencies separated from
         * the dependencies that *should* already be on the host's system.
         */
        def javaFxAbsolutePath = getJavaFxJarPath()
        classpath(javaFxAbsolutePath)
        println("Injected JavaFX .jar file to dependencies from ${javaFxAbsolutePath}")
    }

    doLast {
        copyDbToBuildDir();

        cliCmd("chmod a+rwx ${warOutputDir}/*")
    }
}

/**
 * Not used, but this code would create a JAR file instead of a WAR file.
 * JAR files can run by themselves whereas WAR files require running in a Tomcat container.
 *
 * <pre>
 * bootJar {
 *     archiveBaseName = project.name
 *     archiveVersion = project.version
 * }
 * </pre>
 */

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

/**
 * {@inheritDoc}
 * Run specific test using {@code gradle test --tests <TestClassName, e.g. _11_>}
 */
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
