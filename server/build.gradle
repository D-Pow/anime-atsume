import java.lang.reflect.Field;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.tools.ToolProvider;

import groovy.json.JsonBuilder;

import org.animeatsume.gradleutils.*;


/**
 * To use CLI args in a task/function, append the CLI arg/flag to `-D` or `-P` accordingly:
 *   - System.getProperty()  == ./gradlew myTask -DmyCliArgName='myCliArgValue'
 *   - project.getProperty() == ./gradlew myTask -PmyCliArgName='myCliArgValue'
 * Note: `System.getProperty()` doesn't require a `.hasProperty()` check.
 */

/**
 * Use `tasks.register("myTaskName")` to lazy-load the tasks that aren't needed for global app
 * functionality.
 * i.e. don't run the lifecycle scripts -- including the tasks' top-level configuration information
 * (which is usually always run by default as the Gradle process itself starts, regardless of the
 * specified task) -- until the task is actually needed/called.
 *
 * @see <a href="https://stackoverflow.com/questions/53654190/what-is-the-difference-between-registering-and-creating-in-gradle-kotlin-dsl">StackOverflow post.</a>
 * @see <a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html#sec:how_do_i_defer_creation">Gradle docs for {@code tasks.register()}</a>
 * @see <a href="https://discuss.gradle.org/t/closure-vs-action/37806/2">Tasks ({@code Closures}) vs Actions</a>
 */


plugins {
    /*  Base app plugins  */
    id 'java'
    id 'application'  // Docs: https://docs.gradle.org/current/userguide/application_plugin.html#sec:application_tasks
    id 'war'

    /*  Building and packaging plugins  */
    id 'java-library'  // Provides enum for Java versions. Example: https://docs.gradle.org/current/userguide/custom_plugins.html#:~:text=Example%209.%20Creating%20a%20simple%20script%20plugin
    id 'java-gradle-plugin'  // Add Gradle internal classes to classpath; Necessary to expose classes as `public` classes to the parent/build.gradle files importing this

    /*  Language and IDE plugins  */
    id 'org.openjfx.javafxplugin' version '0.1.0'  // Gradle plugin to use/package JavaFX .jar files in our app since Java >= 11 doesn't include JavaFX
    id 'groovy'
    id 'idea'

    /*  Dependency plugins  */
    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '3.0.4'  // See: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle
    id 'io.spring.dependency-management' version '1.1.0'

    id 'io.freefair.lombok' version '8.0.1'
    // Alternatively, manually add both dependency and annotation-processor in `dependencies`:
    // implementation 'org.projectlombok:lombok:<version>'
    // annotationProcessor 'org.projectlombok:lombok:<version>'

    /*
     * Similar to the below `apply from:` statement, we could write our own custom plugin in
     * a sub-project and apply it here so it's available for use within this Gradle file
     * automatically without us having to specify additional configs.
     */
    // id 'anime-atsume-build-utils'
}

/*
 * Custom utils for Gradle, though as an import/file rather than as a plugin.
 * Necessary if a sub-project's code is used within Gradle files.
 *
 * Alternatively, `buildSrc/` is a reserved dir for (multi-)project-wide configs
 * for use in Gradle.
 *
 * Requires:
 *  - Import statement in file.
 *  - Applying your own custom plugin (even if it's a no-op); otherwise, even code
 *    unrelated to the plugin can't be used in Gradle.
 *  - Adding Gradle's plugin-portal repository for plugin API usage.
 *  - To run sub-projects' tasks, add `dependsOn gradle.includedBuild("sub-project-dir").task(":my-task");` to `tasks.preCompile`
 *
 * If running into issues with discovering/importing sub-project code, try:
 *  - Add `compileClasspath += files('sub-project-dir')` to `sourceSets.main`
 *  - Add `compileOnly project.files('sub-project-dir')` to `dependencies`
 *    Alternatives:
 *      - `compileOnly fileTree('sub-project-dir')`
 *      - `compileOnly 'org.myapp:packagename'`
 */
apply from: "utils/build.gradle"


/* Code was originally written for Java v8 so ensure it can run with these configs */
sourceCompatibility = JavaVersion.VERSION_17;
targetCompatibility = JavaVersion.VERSION_17;


/**
 * Make all (root + sub-) projects use the same dependency registries via `allprojects`.
 * Alternatively, only the sub-projects can be targeted with `subprojects`.
 *
 * Note: If trying to run your own custom plugin in all sub-projects, you must use the
 * old fashioned `apply from` since `plugins` isn't ready quite yet for handling both
 * the root project and sub-projects.
 *
 * @see <a href="https://stackoverflow.com/questions/12077083/what-is-the-difference-between-allprojects-and-subprojects/12077290#12077290">{@code allprojects} vs {@code subprojects}</a>
 * @see <a href="https://stackoverflow.com/questions/32352816/what-the-difference-in-applying-gradle-plugin/32353244#32353244">{@code plugins} vs {@code apply from}</a>
 */
allprojects {
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()  // For writing our own Gradle plugins
    }
}


/**
 * Adds relevant directories for the app to the global scope.
 *
 * `ext` is more-or-less equivalent to global vars.
 *
 * @see <a href="https://stackoverflow.com/questions/61842857/passing-environment-variables-from-build-gradle-to-custom-plugin/61853116#61853116"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project.extraproperties"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A)"></a>
 */
ext {
    // Default formatting scheme for `jar`/`war` tasks: `<name>-<version>.<extension>`
    // Note: "build" was only added before `archiveBaseName`, `archiveVersion`, etc. to distinguish global `ext` var from local `jar`/`war` var.
    buildArchiveBaseName = rootProject.name.toLowerCase();  // Only the base `<name>` of the formatting scheme
    buildArchiveVersion = "";  // Only the `<version>` portion of the formatting scheme
    //buildArchiveFileName = "${buildArchiveBaseName}.jar";  // Full name of the generated .jar/.war archive, ignoring default formatting scheme


    osName = System.getProperty("os.name").toLowerCase();
    osArch = System.getProperty("os.arch").toLowerCase();
    osVersion = System.getProperty("os.version").toLowerCase();

    if (osName.matches("mac|darwin")) {
        osName = "osx";
    }

    isWindows = osName.startsWith("windows");


    javaHome = "${System.properties['java.home']}";
    javaLibDir = "${javaHome}/lib";

    if (!new File(javaHome).exists()) {
        javaHome = "${JAVA_HOME}" || System.getenv('JAVA_HOME');
    }

    if (!new File(javaLibDir).exists()) {
        javaLibDir = "${javaHome}/../lib";
    }

    javafxVersion = "17.0.7"; // "21-ea+5";


    repoRootDirPath = new File("${project.projectDir.toString().trim()}/..").getCanonicalPath();

    try {
        _repoRootDirPathViaGit = cliCmd("git rev-parse --show-toplevel");

        if (_repoRootDirPathViaGit != null && _repoRootDirPathViaGit.length > 0) {
            repoRootDirPath = _repoRootDirPathViaGit;
        }
    } catch (e) {}


    clientDirPath = "${repoRootDirPath}/client";
    clientDirDepsPath = "${clientDirPath}/node_modules";
    serverDirPath = "${projectDir}";
    serverWebAssetDirPathRelative = "src/main/resources/public"
    serverWebAssetDirPath = "${serverDirPath}/${serverWebAssetDirPathRelative}";
    warOutputDir = "${project.buildDir}/${project.libsDirName}";  // `currentDir/build/libs/` by default
    dbName = 'anime_atsume.db';
    buildUtilsDir = "${serverDirPath}/utils";
    buildUtilsGradleConfig = "${buildUtilsDir}/build.gradle";
    buildUtilsJars = fileTree("${buildUtilsDir}/build/libs") {
        include("*.jar");
        exclude("*sources.jar");
    }
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}



/**
 *  - `implementation` = Adds to build output and classpath. Required to run your code but
 *      isn't needed during compilation. Try to use this most of the time.
 *  - `compileOnly` = Doesn't add to build output but does add to classpath. Only needed to
 *      compile your code. e.g. Decorators, JavaFX, etc.
 *  - `api` = Somewhat of a middle-ground between `implementation` and `compileOnly` (replaced `compile`).
 *      Usually only used in library modules. Exposes dependency to consumers of the module.
 *      Try to avoid this as it increases build time significantly when many are specified and consumers
 *      should specify whatever dependencies they need themselves rather than relying on yours.
 *  - `runtimeOnly` - Don't even build the dependency, just inject it in the resulting build output.
 *  - `compile` - Deprecated. Same as thing as `api`.
 *
 * @see <a href="https://abhiappmobiledeveloper.medium.com/difference-between-implementation-api-compile-and-runtimeonly-in-gradle-dependency-55b70215d245#ae30">Overview and comparison chart</a>
 * @see <a href="https://stackoverflow.com/questions/47365119/gradle-dependency-configuration-implementation-vs-api-vs-runtimeonly-vs-compil/47365147#47365147">SO post explaining dependency tags</a>
 * @see <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">Gradle "Dependency management" docs</a>
 * @see <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph">Gradle illustration of dependencies</a>
 * @see <a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:dependency-types">Gradle explanation of types dependencies</a>
 */
dependencies {
    // JavaFX was removed in Java 11 so ensure it's installed (uses OpenJDK)
    // Only required if not using the Gradle plugin above
    // Use `:18.0.2` for Java < 17
    implementation "org.openjfx:javafx:${javafxVersion}"

    /*
     * Spring Boot 3 dropped support for Java 8, which came with many consequences.
     * Besides the obvious having to upgrade your installed Java version, this decision
     * brought about numerous other problems, e.g. incredible amounts of logging issues
     * (e.g. Slf4j, Log4j, Logback, etc. no longer work *at all* using their original configurations
     * and require immense amounts of config-updates to get back to normal), `javax` is replaced 
     * with `jakarta` which took *hours* to figure out (partly due to the IDE only wanting to import 
     * `javax` classes; mostly due to that `@Entity` and similar classes weren't being tracked anymore
     * if imported from `javax`, so the auto-configuration/bean-injection of Spring failed
     * for no apparent reason; thus, it took incredibly long to go through the debugger, Stack Overflow,
     * their docs (which are horrendous btw), etc. to figure out such a simple solution),
     * and related off-the-wall issues.
     * However, that being said, at least this new Java 17 configuration should last us a while
     * without any drastic changes like this in the near future.
     *
     * See:
     *  - Spring Boot 3 migration info: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide
     *  - Spring (base) migration info: https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x
     *  - Spring Boot 2.7 release notes which mention some helpful tidbits of info to prep for migration to 3: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.7-Release-Notes
     *  - Hibernate changelog task for them to move from `javax` to `jakarta`: https://github.com/hibernate/hibernate-orm/blob/15873c17fb7bd03e2579d8e3b6ab800734c21545/changelog.txt#L627
     *
     * Just for closure, in order to use `javax` again (which you shouldn't b/c Spring won't pick
     * up the annotations anymore), these are the packages to use:
     *  - javax.servlet:javax.servlet-api:4.0.1
     *  - javax.persistence:javax.persistence-api:2.2
     *  - javax.transaction:javax.transaction-api:1.3
     */

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // Collection of most DB dialects out there, try to use this first and only use the
    // others as fallbacks
    implementation 'org.hibernate.orm:hibernate-community-dialects:6.1.7.Final'
    implementation 'org.xerial:sqlite-jdbc:3.40.1.0'  // Old version: implementation 'com.github.gwenn:sqlite-dialect:0.1.2'
    // implementation 'org.postgresql:postgresql:42.5.4'
    // implementation 'mysql:mysql-connector-java'

    // HTML parser
    implementation 'org.jsoup:jsoup:1.15.3'

    /*
     * Need a webdriver library to load and scrape Kissanime pages.
     * Options for webdriver libraries: https://gist.github.com/alexislucena/ce3bdccf334f5cd0da41920725947b5c
     *
     * Decided to use [ui4j](https://webfolderio.github.io/ui4j/) because it's lightweight
     * in comparison to Selenium and uses native Java unlike PhantomJS.
     * Using v3.1.0 because it ironically has more features than 4.0.0
     * (see https://github.com/webfolderio/ui4j/tree/3.0.0)
     */
    implementation 'io.webfolder:ui4j-webkit:4.0.0'
    // Alternative: Use Selenium directly:
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    // implementation 'org.seleniumhq.selenium:selenium-java:4.10.0'

    implementation 'net.lightbody.bmp:browsermob-core:2.1.5'
    implementation 'io.github.qiwang97:browsermob-core:2.2.3-release'
//    implementation 'com.arthenica:ffmpeg-kit-full:5.1'
//    implementation 'com.arthenica:ffmpeg-kit-full-gpl:5.1.LTS'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    /**
     * Not sure exactly why but occasionally `java/lib/tools.jar` won't be loaded (at least on Mac).
     * Thus, load it dynamically via the native Java API.
     * Likely due to certain features used in this `build.gradle` file, but still obviously necessary.
     *
     * @see <a href="https://stackoverflow.com/questions/25626757/correct-way-of-referencing-tools-jar-in-a-cross-platform-way/25628156#25628156">Handling {@code Cannot find "tools.jar"} errors.</a>
     */
    compileOnly files(Optional
        .ofNullable((URLClassLoader) ToolProvider.getSystemToolClassLoader())
        .map(urlClassLoader -> urlClassLoader.getURLs()) // `.ifPresent()` doesn't work since it returns void
        .orElse(new String[] { "${javaLibDir}/tools.jar" })
    )

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}


if (System.properties.getProperty('jfxrtDir') == null) { // if not in root-level gradle.properties
    System.properties.setProperty('jfxrtDir', '.');
}


configurations.all {
    /*
     * Fixes an error where `logback` is considered to have duplicate files.
     *
     * Alternatives:
     *   - exclude group: 'ch.qos.logback'
     *   - exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
     *   - exclude module: 'slf4j-log4j14'
     *
     * @see <a href="https://discuss.gradle.org/t/gradle-7-fail-for-duplicates-in-copy-specs-has-no-duplicates-in-project/39834">Fixing Gradle duplicate files issue</a>
     * @see <a href="https://stackoverflow.com/questions/12926899/java-lang-noclassdeffounderror-org-slf4j-loggerfactory">{@code NoClassDefFoundError: org.slf4j.LoggerFactory} error</a>
     * @see <a href="https://stackoverflow.com/questions/44111973/slf4j-loggerfactory-class-definition-not-found-with-gradle">SO: Similar question</a>
     * @see <a href="https://stackoverflow.com/questions/42531127/gradle-exception-in-thread-main-java-lang-noclassdeffounderror-org-slf4j-logg">SO: Similar question</a>
     * @see <a href="https://stackoverflow.com/questions/40033235/how-to-properly-configure-gradle-build-to-avoid-including-log4j-and-slf4j-from-t">SO: Possible solution</a>
     * @see <a href="https://discuss.gradle.org/t/gradle-7-fail-for-duplicates-in-copy-specs-has-no-duplicates-in-project/39834">Gradle discussion</a>
     * @see <a href="https://github.com/gradle/gradle/issues/17236">GitHub issue</a>
     */
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}


application {
    // TODO - Not stable. Find a way to actually find the true `main()` method of the source code.
    File mainClassFile = (File) sourceSets.main.java.find(src -> src.name.toLowerCase().matches(".*(main|driver).*"));
    String mainClassName = "${rootProject.group}.${mainClassFile.name.replace(".java", "")}";

    mainClass = mainClassName;
}


javafx {
    /*
     * For normal dependencies (if not using this `javafx` plugin), we would expect to simply use the format:
     *      implementation "org.openjfx:javafx:${javafxVersion}"
     *
     * Though, JavaFX contains native OS bindings for the graphics, interactions, etc.
     * Since JAR files assume the necessary OS bindings were installed during the OpenJFX install,
     * and since JavaFX was removed from that Java install in v11, this means we (likely) can't simply
     * package a JavaFX application JAR by adding JFX dependencies into the generated JAR file.
     * Instead, we would need to download the JavaFX SDK directly (.jar files and OS bindings), unzip it, and
     * specify them as a `--module-path`/`--add-modules` in the CLI while running the .jar.
     *
     * To fix this, we have a few options:
     *
     * 1. In the simplest case, if we have OpenJFX installed on the OS, the local JFX installation (which adds
     *    the OS bindings and JAR files) would work as long as its set in the PATH.
     * 2. We could download the OpenJFX .jar files and OS bindings via our custom `downloadJavaFX()` Gradle util,
     *    and use that via:
     *    `java --module-path=./path/to/javafx-unzipped-dir/ --add-modules=javafx.base,javafx.graphics,etc -jar my-app.jar`
     * 3. If we use this `javafx` plugin to download simplify the JFX .jar files, which also sets them into paths
     *    for running/IDE interpretation/building/everything, we might possibly be able to run the final app output .jar
     *    regardless of how the CLI command is run (e.g. `java -jar my-app.jar` without the `--module-path`/`--add-modules`
     *    flags).
     *    This needs to be verified, but theoretically, it's possible this would solve the JFX issues described above.
     *
     * Use `:18.0.2` for Java < 17.
     */

    version = javafxVersion
    // Include all modules to allow for painless augmentation and extending later
    modules = [
        "javafx.base",
        "javafx.graphics",
        "javafx.controls",
        "javafx.media",
        "javafx.fxml",
        "javafx.swing",
        "javafx.web",
    ]
}


/**
 * Not used, but this code would create a JAR file instead of a WAR file.
 * JAR files can run by themselves whereas WAR files require running in a Tomcat container.
 *
 * <pre>
 * bootJar {
 *     archiveBaseName = project.name
 *     archiveVersion = project.version
 * }
 * </pre>
 */

/**
 * Also not used, but `jar` causes a .jar file to be generated instead of a .war file.
 *
 * However, with the code changes made to spit Gradle utils into a separate sub-project,
 * this resulted in a `X-plain.jar` (and sometimes a `X-plain.war` file as well) to be
 * generated even though we only care about the "normal" .war file.
 *
 * Disabling these tasks solves that issue.
 *
 * @see <a href="https://stackoverflow.com/questions/71060229/after-upgrading-to-gradle-7-x-generating-two-war-files/71074994#71074994">SO post solving the issue</a>
 * @see <a href="https://stackoverflow.com/questions/30728533/gradle-override-transitive-dependency-by-version-classifier">Alternative: Forcing {@code slf4j} version</a>
 * @see <a href="https://discuss.gradle.org/t/forcing-a-dependency-still-takes-latest-version/2050/3">Docs: Forcing {@code slf4j} version</a>
 * @see <a href="https://stackoverflow.com/questions/67663728/spring-boot-2-5-0-generates-plain-jar-file-can-i-remove-it/67663956#67663956">Solution</a>
 */
jar {
    enabled = false

    archiveBaseName = buildArchiveBaseName;
    archiveVersion = buildArchiveVersion;

    // archiveClassifier = ""  // Occasionally necessary

    manifest {
        attributes(
            'Main-Class': application.mainClass.get(),
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
            'Implementation-Title': archiveBaseName,
            // Comment Implementation-Version to not add version number to output .jar filename.
            // See: https://stackoverflow.com/questions/26540059/get-gradle-to-ignore-version-number-in-jar-name
            //'Implementation-Version': "${gradle.rootProject.version}",
        )
    }

    /*
     * Default to making a fat-jar so the final file can be run without the user needing to download dependencies and
     * specify the modules via `--module-path`/`--add-modules`.
     * This makes running the final app-output .jar file easier.
     * Disable in CLI via `-PfatJar=false`
     */
    def createFatJar = project.properties.getOrDefault("fatJar", true);

    if (createFatJar) {
        // Copy all dependencies needed for runtime into jar but not the compile-time ones since they're only needed for building
        from {
            configurations.runtimeClasspath.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        // As mentioned in the `ext.javafx` config's docstring, fat-jars don't play nicely
        // with `module-path` so exclude the file.
        // See: https://stackoverflow.com/a/70175935/5771107
        exclude("module-info.class");
    }

    // Exclude signature files if running the output .jar file fails due to security reasons on the parent OS
    //exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA');
}

war {
    enabled = false

    archiveBaseName = buildArchiveBaseName;
    archiveVersion = buildArchiveVersion;
}


gradle.taskGraph.whenReady {
    tasks.forEach { task ->
        /**
         * Fix the problem where there are duplicate files or archives.
         * Only select tasks that contain `duplicatesStrategy`, lest Gradle throws a "property doesn't exist" error
         */
        if (task.hasProperty("duplicatesStrategy")) {
            task.setProperty("duplicatesStrategy", DuplicatesStrategy.INCLUDE);
        }
    }
}


/**
 * Build, run, etc. all depend on the `compileJava` task.
 * As such, to ensure the front-end was built before attempting to run the server,
 * it needs to be specified as a dependency.
 *
 * Note: This is different than `doFirst` in that `dependsOn` runs before the "configuration"
 * lifecycle method (what's run in the top-level of a task) which is run before the "doFirst"
 * lifecycle method.
 *
 * Also, the syntax here is just the new/recommended syntax rather than just plain name-declarations
 * at the top-level of the file.
 */

/**
 * {@inheritDoc}
 */
tasks.register("preCompile") {
    description "Runs required checks and logic before compiling Java code.";

    dependsOn "buildFrontend";  // Same as `tasks.<my-task>.dependsOn([ "someTask" ])`
}
tasks.compileJava.dependsOn([ "preCompile" ]);


tasks.register("buildFrontend") {
    description "Builds the front-end (outputs to ${serverWebAssetDirPathRelative})";

    doLast {
        buildFrontendIfNotPresent();
    }
}


/**
 * Note: Allow the Spring tasks to be eagerly-loaded since they they are in Spring itself.
 * Also, {@code tasks.register()} doesn't allow overriding tasks.
 */

/**
 * {@inheritDoc}
 */
bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}
tasks.run.dependsOn([ "bootRun" ]);

/**
 * {@inheritDoc}
 * WAR is needed because JAR doesn't include {@link resources.public resources/public/}
 * Spring disables {@code war} task and replaces it with {@code bootWar}
 */
bootWar {
    enabled = true;  // Required due to above deactivation of the `war` task

    archiveBaseName = buildArchiveBaseName;
    archiveVersion = buildArchiveVersion;

    doFirst {  // Run in `doFirst` rather than config step to avoid race conditions with `gradle.rootProject.setVersion()`
        archiveBaseName = buildArchiveBaseName;
        // archiveVersion = buildArchiveVersion;  // Don't add `project.version` to output .war file name
    }

    if (injectJavaFxJar.toBoolean()) {
        /*
         * Add JavaFX's .jar file to classpath to bundle it with the app.
         *
         * Allows website hosting systems that don't support JavaFX to
         * run this webapp.
         *
         * Could also be done in dependencies: `implementation project.files(javaFxAbsolutePath)`
         * but was put here instead to keep the actual app's dependencies separated from
         * the dependencies that *should* already be on the host's system.
         */
        def javaFxAbsolutePath = getJavaFxJarPath()
        classpath(javaFxAbsolutePath)
        println("Injected JavaFX .jar file to dependencies from ${javaFxAbsolutePath}")
    }

    doLast {
        copyDbToBuildDir();

        cliCmd("chmod 777 ${warOutputDir}/*")
    }
}


/**
 * {@inheritDoc}
 * Run specific test using {@code gradle test --tests <TestClassName, e.g. _11_>}
 */
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}


/**
 * {@inheritDoc}
 * Configures JavaDoc generation by specifying the main class and the app's {@code classpath}.
 *
 * @see <a href="https://stackoverflow.com/questions/45997976/how-generate-javadoc-with-gradle">StackOverflow post</a>
 */
javadoc {
    source = sourceSets.main.allJava
    // classpath = configurations.compile
}


/**
 * Ensure sub-projects maintain their own name and version vs being overwritten by this
 * super-project's name and version.
 *
 * @see <a href="https://stackoverflow.com/questions/53185588/gradle-get-subporject-name-version/53185758#53185758">SO: Post discussing this</a>
 */
gradle.projectsEvaluated {
    subprojects { subproject ->
        jar {
            manifest {
                attributes(
                    Name: subproject.archivesBaseName,
                    Version: subproject.version,
                    // '<package.mainClass>',
                )
            }
        }
    }
}



wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

tasks.register("wrapperVersion") {
    description "Prints current Gradle wrapper version, updates the version (-Pu|-Pupgrade[=desiredVersion], default: latest), or lists available versions (-Pl).";

    doLast {
        String wrapperVersionNumber = null;

        if (project.hasProperty("u")) {
            wrapperVersionNumber = project.property("u");
        } else if (project.hasProperty("upgrade")) {
            wrapperVersionNumber = project.property("upgrade");
        }

        if (wrapperVersionNumber == null && !project.hasProperty("l")) {
            String gradleWrapperProperties = new File("gradle/wrapper/gradle-wrapper.properties").text;

            gradleWrapperProperties.eachMatch("distributionUrl.*", { match ->
                match.eachMatch("\\d[\\d.]+", { versionMatch ->
                    println("Current Gradle wrapper version: ${versionMatch}");
                });
            });

            return;
        }

        /*
         * CLI cmd:
         *  - Get Gradle-releases HTML page.
         *  - Extract only version numbers.
         *  - Extract only the number from the version (deleting text like "v" from "v1.2.3").
         *  - Sort in descending order.
         */
        String allGradleVersionsResponse = cliCmd("curl -fsSL 'https://gradle.org/releases' | grep -Eo 'v([0-9]+\\.){1,3}[0-9]*\\W' | sed -E 's/^v([0-9\\.]*).?\$/\\1/; s/[^0-9\\.]//g' | sort -Vur");
        List<String> allGradleVersions = allGradleVersionsResponse.split("\n");

        if (project.hasProperty("l")) {
            println("Available Gradle versions:\n${allGradleVersions}");

            return;
        }

        String wrapperVersionNumberDefault = allGradleVersions.get(0);

        if (wrapperVersionNumber.isEmpty()) {
            // Upgrade flag was passed but version was unspecified. Default to latest Gradle version.
            wrapperVersionNumber = wrapperVersionNumberDefault;
        }

        if (!allGradleVersions.contains(wrapperVersionNumber)) {
            println("Specified Gradle wrapper version ${wrapperVersionNumber} doesn't exist. Choosing closest version matching ${wrapperVersionNumber}...");

            wrapperVersionNumber = allGradleVersions.stream()
                .filter(version -> "${version}".matches("^${wrapperVersionNumber}.*"))
                .findFirst()
                .orElse(wrapperVersionNumberDefault);
        }

        assert wrapperVersionNumber != null;

        println("Upgrading Gradle wrapper to v${wrapperVersionNumber}");

        // See:
        //  - https://docs.gradle.org/current/userguide/gradle_wrapper.html#sec:upgrading_wrapper
        //  - https://gradle.org/install#with-the-gradle-wrapper
        cliCmd("./gradlew wrapper --distribution-type=bin --gradle-version=${wrapperVersionNumber}");
    }
}
