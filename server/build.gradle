import java.lang.reflect.Field;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.tools.ToolProvider;

import groovy.json.JsonBuilder;

/**
 * To use CLI args in a task/function, append the CLI arg/flag to `-D` or `-P` accordingly:
 *   - System.getProperty()  == ./gradlew myTask -DmyCliArgName='myCliArgValue'
 *   - project.getProperty() == ./gradlew myTask -PmyCliArgName='myCliArgValue'
 * Note: `System.getProperty()` doesn't require a `.hasProperty()` check.
 */

plugins {
    id 'java'
    id 'war'
    id 'application'  // Docs: https://docs.gradle.org/current/userguide/application_plugin.html#sec:application_tasks
    id 'java-library'  // Provides enum for Java versions. Example: https://docs.gradle.org/current/userguide/custom_plugins.html#:~:text=Example%209.%20Creating%20a%20simple%20script%20plugin
    id 'idea'
    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    // If running as a standalone JavaFX app with Java >= v11, add this plugin
    // id 'org.openjfx.javafxplugin' version '0.0.10'
}

/* Code was originally written for Java v8 so ensure it can run with these configs */
sourceCompatibility = JavaVersion.VERSION_1_8;
targetCompatibility = JavaVersion.VERSION_1_8;

/**
 * Adds relevant directories for the app to the global scope.
 *
 * `ext` is more-or-less equivalent to global vars.
 *
 * @see <a href="https://stackoverflow.com/questions/61842857/passing-environment-variables-from-build-gradle-to-custom-plugin/61853116#61853116"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project.extraproperties"></a>
 * @see <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A)"></a>
 */
ext {
    isWindows = System.getProperty("os.name")
        .toLowerCase()
        .startsWith("windows");

    javaHome = "${System.properties['java.home']}"

    if (!new File(javaHome).exists()) {
        javaHome = "${JAVA_HOME}" || System.getenv('JAVA_HOME');
    }

    javaLibDir = "${javaHome}/lib";

    if (!new File(javaLibDir).exists()) {
        javaLibDir = "${javaHome}/../lib";
    }

    repoRootDirPath = cliCmd("git rev-parse --show-toplevel").toString().trim();
    clientDirPath = "${repoRootDirPath}/client";
    clientDirDepsPath = "${clientDirPath}/node_modules";
    serverDirPath = "${projectDir}";
    serverWebAssetDirPath = "${serverDirPath}/src/main/resources/public";
    warOutputDir = "${project.buildDir}/${project.libsDirName}";  // `currentDir/build/libs/` by default
    dbName = 'anime_atsume.db';
    buildSrcJars = fileTree("${serverDirPath}/buildSrc/build/libs") {  // `buildSrc/` is a Gradle-reserved dir for (multi-)project-wide configs
        include("*.jar");
        exclude("*sources.jar");
    }
}

/**
 * Use `tasks.register("myTaskName")` to lazy-load the tasks that aren't needed for global app
 * functionality.
 * i.e. don't run the lifecycle scripts -- including the tasks' top-level configuration information
 * (which is usually always run by default as the Gradle process itself starts, regardless of the
 * specified task) -- until the task is actually needed/called.
 *
 * @see <a href="https://stackoverflow.com/questions/53654190/what-is-the-difference-between-registering-and-creating-in-gradle-kotlin-dsl">StackOverflow post.</a>
 * @see <a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html#sec:how_do_i_defer_creation">Gradle docs for {@code tasks.register()}</a>
 * @see <a href="https://discuss.gradle.org/t/closure-vs-action/37806/2">Tasks ({@code Closures}) vs Actions</a>
 */

tasks.register("printSrcInfo") {
    doLast {
        println("project.files:\n${objToJson(project.files("src", "buildSrc"))}\n\n");
        println("files:\n${objToJson(files("src", "buildSrc"))}\n\n");

        // Note: `rootProject.artifacts` has changed over the years, so get the source code files via `sourceSets`
        if (project.hasProperty("s") || System.hasProperty("s")) {
            // Show source code files, but only upon request b/c it can easily be a ridiculously long list
            println(getSourceFiles());
            println();
        }
    }
}

tasks.register("printCommands") {
    /**
     * Alternatives:
     *  - {@code configurations.forEach(config -> { println(config.name); });}
     *  - {@code ./gradlew --console plain dependencies 2>/dev/null | grep -Eio '^[a-z]+ - .*'}
     *
     * @see <a href="https://stackoverflow.com/questions/38362977/how-to-list-all-tasks-for-the-master-project-only-in-gradle/40188539#40188539">List all Gradle tasks</a>
     * @see <a href="https://stackoverflow.com/questions/41173616/how-can-i-get-a-list-of-all-configurations-for-a-gradle-project">List all Gradle configurations</a>
     */
    doLast {
        println(cliCmd("./gradlew -q tasks --all"));
    }
}

tasks.register("printSrcFiles") {
    doLast {
        println(getSourceFiles(true));
    }
}

def getSourceFiles() {
    return getSourceFiles(true);
}
def getSourceFiles(boolean includeSourceSetNames) {
    StringBuilder sb = new StringBuilder();

    sourceSets.each {
        if (includeSourceSetNames) {
            sb.append("${it}\n");
        }

        it.allSource.each {
            // file path/name
            sb.append("${it}\n");
        }
    }

    return sb.toString().trim();
}


repositories {
    mavenCentral()
}

dependencies {
    // JavaFX was removed in Java 11 so ensure it's installed (uses OpenJDK)
    implementation 'org.openjfx:javafx:18.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok:1.18.24'

    // implementation 'mysql:mysql-connector-java'
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation 'com.github.gwenn:sqlite-dialect:0.1.0'

    // HTML parser
    implementation 'org.jsoup:jsoup:1.15.3'

    /*
     * Need a webdriver library to load and scrape Kissanime pages.
     * Options for webdriver libraries: https://gist.github.com/alexislucena/ce3bdccf334f5cd0da41920725947b5c
     *
     * Decided to use [ui4j](https://webfolderio.github.io/ui4j/) because it's lightweight
     * in comparison to Selenium and uses native Java unlike PhantomJS.
     * Using v3.0.0 because it ironically has more features than 4.0.0
     * (see https://github.com/webfolderio/ui4j/tree/3.0.0)
     */
    implementation 'io.webfolder:ui4j-webkit:3.0.0'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    /**
     * Not sure exactly why but occasionally `java/lib/tools.jar` won't be loaded (at least on Mac).
     * Thus, load it dynamically via the native Java API.
     * Likely due to certain features used in this `build.gradle` file, but still obviously necessary.
     *
     * @see <a href="https://stackoverflow.com/questions/25626757/correct-way-of-referencing-tools-jar-in-a-cross-platform-way/25628156#25628156">Handling {@code Cannot find "tools.jar"} errors.</a>
     */
    compileOnly files(Optional
        .ofNullable((URLClassLoader) ToolProvider.getSystemToolClassLoader())
        .map(urlClassLoader -> urlClassLoader.getURLs()) // `.ifPresent()` doesn't work since it returns void
        .orElse(new String[] { "${javaLibDir}/tools.jar" })
    )

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}


def objToJson(Object obj) {
    return new JsonBuilder(obj).toPrettyString();
}

def getObjectProperties(Object obj) {
    return getObjectProperties(obj, false, false);
}
def getObjectProperties(Object obj, boolean asString) {
    return getObjectProperties(obj, asString, false);
}
/**
 * Alternatives for printing objects:
 *     - {@code new groovy.json.JsonBuilder(obj).toPrettyString()}
 *     - {@code groovy.json.JsonOutput.prettyPrint(objJsonString)}
 *
 * @see {@link ./src/main/java/org/animeatsume/api/utils/ObjectUtils.java#toString() GetObjectProperties}
 */
def getObjectProperties(Object obj, boolean asString, boolean recurseNestedObjects) {
    Class<?> objClass = obj.getClass();
    Field[] objFields = objClass.getDeclaredFields();

    StringBuilder sb = new StringBuilder(objClass.getName() + " {");

    Map<String, ?> objEntries = Arrays.asList(objFields).parallelStream()
        .reduce(new HashMap<>(), (map, field) -> {
            String fieldName = field.getName();

            sb.append(fieldName).append("=");

            Object fieldValue = "Unparsed";

            try {
                field.setAccessible(true); // Make private fields readable
                fieldValue = field.get(obj);

                // Recurse if field is a dependency/non-primitive class
                // i.e. when `Class::toString()` returns something akin to "com.company.SomeClass@a1b2c3d4"
                if (recurseNestedObjects && fieldValue.toString().matches("^(org|com)[^@]*\\.\\w+@[a-z0-9]{8}\$")) {  // Note: `\\$` (Java) needs to be replaced with `\$` (Gradle)
                    fieldValue = getObjectProperties(fieldValue, asString, recurseNestedObjects);
                }
            } catch (IllegalAccessException ignored) {}

            sb.append("(")
                .append(fieldValue)
                .append(")");

            sb.append(", ");

            map.put(fieldName, fieldValue);

            return map;
        }, (mapIterationA, mapIterationB) -> {
            Map<Object, Object> partiallyCombined = new HashMap<>(mapIterationA);

            partiallyCombined.putAll(mapIterationB);

            return partiallyCombined;
        });

    sb.delete(sb.length() - 2, sb.length()); // Remove last comma+space
    sb.append("}");

    if (asString) {
        return sb.toString();
    }

    return objEntries;
}

def getGradlePropertiesAndSettings() {
    // Not sure why, but `.each { it ->` fails, thus it's omitted
    rootProject.properties.each {
        // Note: `$it.someField` is only for strings, `it.someField` is for normal code
        def isNull = it.value == null;

        def blah = it.value;

        // TODO - Add this List logic to `ObjectUtils.getObjectProperties()`
        if (
            !isNull
            && (
                it.value.getClass().isArray()
                || it.value instanceof List
                || it.value instanceof Map
                || it.value instanceof Set
                || it.value instanceof Collection
            )
        ) {
            println "$it.key -> ["

            if (it.value instanceof Map) {
                it.value.each { k, v ->
                    println "    ${k} -> ${v}"
                }
            } else {
                it.value.each { propertyValue ->
                    println "    ${propertyValue}"
                }
            }

            println "]"
        } else {
            println "$it.key -> $it.value\n"
        }
    }
}


def cliCmd(String commandAndArgs) {
    return cliCmd(commandAndArgs, null);
}
def cliCmd(String commandAndArgs, String dir) {
    return cliCmd(commandAndArgs, dir, false);
}
/**
 * See:
 *  - Gradle `exec` task docs: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html
 *  - Running a CLI command with pipes, `&&`, `||`, etc.: https://discuss.gradle.org/t/how-to-achive-bash-like-functionality-e-g-ls-grep-mystuff-with-gradle-project-exec/5516/4
 *  - Support Unix and Windows: https://stackoverflow.com/questions/27406054/how-do-you-support-a-gradle-exec-task-for-both-mac-and-pc
 *  - Spread lists (or simply pass arrays) in spread-operator functions: https://stackoverflow.com/questions/9863742/how-to-pass-an-arraylist-to-a-varargs-method-parameter/9863752#9863752
 *  - Get STD(IN|OUT|ERR) from Gradle terminal executions:
 *      + https://stackoverflow.com/questions/38071178/executing-shell-script-and-using-its-output-as-input-to-next-gradle-task/38072449#38072449
 *      + https://stackoverflow.com/questions/32198697/how-to-run-shell-script-from-gradle-and-wait-for-it-to-finish
 *  - Pass initial CLI args to nested terminal command: https://www.baeldung.com/gradle-command-line-arguments
 *  - Run terminal commands from Gradle script: https://stackoverflow.com/questions/159148/groovy-executing-shell-commands
 *  - Running Bash commands in Gradle: https://stackoverflow.com/questions/52389713/execute-bash-command-in-a-gradle-function
 *
 * Alternatives:
 *  - {@code "my command".execute().toString()}
 *      + Likely will require {@code cmd.execute().consumeProcessOutput(stdOut, stdErr)}
 *  - {@code executeCommand(cmd)}
 *  - {@code (Below with or without `.waitFor()`)}
 *  - {@code new String(cmd.execute()[.getOutputStream()|.toByteArray()][.toByteArray()])}
 *  - They may or may not require:
 *      + {@code .text.trim()}
 *      + {@code .consumeProcessOutput(stdOut, stdErr)} // Assuming the args are instances of {@code StringBuilder}
 *      + {@code .waitForProcessOutput(stdOut, stdErr)}
 *      + {@code new OutputStreamWriter(subProcess.[functionFromAbove]()).toString()}
 *  - Something akin to:
 *  <pre>
 *      public class StreamGobbler implements Runnable {
 *          private final InputStream inputStream;
 *          private final Consumer<String> consumer;
 *
 *          public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {
 *              this.inputStream = inputStream;
 *              this.consumer = consumer;
 *          }
 *
 *          @Override
 *          public void run() {
 *              new BufferedReader(new InputStreamReader(inputStream)).lines()
 *                  .forEach(consumer);
 *          }
 *      }
 *      process = Runtime.getRuntime().exec(String.format("bash -c \"cd '%s'; %s\"", directory, command));
 *      StreamGobbler streamGobbler = new StreamGobbler(process.getInputStream(), System.out::println);
 *      Future<?> future = Executors.newSingleThreadExecutor().submit(streamGobbler);
 *      int exitCode = process.waitFor();
 *      assert exitCode == 0;
 *      return future.get(); // wait for command to finish
 *  </pre>
 */
def cliCmd(String commandAndArgs, String dir, boolean returnAllStd) {
    String[] shellCommand = isWindows
        ? new String[]{ "cmd", "/c" }
        : new String[]{ "bash", "-c" };

    List<String> commandLineEntries = ((List<String>) Arrays.asList(shellCommand, commandAndArgs)).flatten();

    ByteArrayInputStream stdIn = new ByteArrayInputStream();
    ByteArrayOutputStream stdOut = new ByteArrayOutputStream();
    ByteArrayOutputStream stdErr = new ByteArrayOutputStream();

    project.exec {
        if (dir != null) {
            workingDir = dir;
        }

        standardInput(stdIn);
        standardOutput(stdOut);
        errorOutput(stdErr);

        ExecSpec processExitInfo = commandLine(commandLineEntries.toArray());
    }

    String stdInStr = stdIn.toString().trim();
    String stdOutStr = stdOut.toString().trim();
    String stdErrStr = stdErr.toString().trim();

    if (returnAllStd) {
        // Extract entries via `def (ret1, ret2, ret3) = myFunc();`
        //   See: https://stackoverflow.com/questions/24617348/multiple-return-syntax/24617510#24617510
        // TODO - Get exit code from cmd and return it here
        return [ stdInStr, stdOutStr, stdErrStr ];
    }

    return stdOutStr;
}


if (System.properties['jfxrtDir'] == null) { // if not in root-level gradle.properties
    System.properties['jfxrtDir'] = '.'
}

def searchFile(Map<String, Closure> places, List<String> searchPaths, String searchID) {
    File result = null;

    places.each { keyDescription, filePathMaybe ->
        if (result != null) {
            return;
        }

        project.logger.debug("Looking for $searchID in $keyDescription");

        def dir = filePathMaybe();

        if (dir == null) {
            project.logger.debug("$keyDescription not set");
        } else {
            project.logger.debug("$keyDescription is $dir");

            searchPaths.each { parentDirOfFileMaybePath ->
                if (result != null) {
                    return;
                }

                File parentDirOfFileMaybe = new File(dir, parentDirOfFileMaybePath);

                project.logger.debug("Trying $parentDirOfFileMaybe.path");

                if (parentDirOfFileMaybe.exists() && parentDirOfFileMaybe.file) {
                    project.logger.debug("found $searchID as $result");
                    result = parentDirOfFileMaybe;
                }
            }
        }
    }

    if (!result?.file) {
        throw new GradleException("Could not find $searchID, please set one of ${places.keySet()}");
    } else {
        project.logger.info("$searchID: ${result}");

        return result
    }
}

def findJavaFxJar() {
    return searchFile(
        [
            'jfxrtDir in Gradle Properties': { System.properties['jfxrtDir'] },
            'JFXRT_HOME in System Environment': { System.getenv('JFXRT_HOME') },
            'JAVA_HOME in System Environment': { System.getenv('JAVA_HOME') },
            'java.home in JVM properties': { System.properties['java.home'] }
        ],
        [
            'jfxrt.jar',
            'lib/jfxrt.jar',
            'lib/ext/jfxrt.jar',
            'jre/lib/jfxrt.jar',
            'jre/lib/ext/jfxrt.jar'
        ],
        'JavaFX Runtime Jar'
    )
}

def findAntJavaFxJar() {
    return searchFile(
        [
            'jfxrtDir in Gradle Properties': { System.properties['jfxrtDir'] },
            'JFXRT_HOME in System Environment': { System.getenv('JFXRT_HOME') },
            'JAVA_HOME in System Environment': { System.getenv('JAVA_HOME') },
            'java.home in JVM properties': { System.properties['java.home'] }
        ],
        [
            'ant-javafx.jar',
            'lib/ant-javafx.jar',
            '../lib/ant-javafx.jar'
        ],
        'JavaFX Packager Tools'
    )
}

def getJavaFxJarPath() {
    return file(findJavaFxJar()).absolutePath
}

def copyDbToBuildDir() {
    copy {
        from dbName
        into warOutputDir
    }

    println("Copied ${dbName} to ${warOutputDir}")
}


def buildFrontendIfNotPresent() {
    def serverWebAssetDir = new File(serverWebAssetDirPath);

    if (serverWebAssetDir.exists() && serverWebAssetDir.list().size() > 0) {
        return;
    }

    println("Client build output directory ${serverWebAssetDirPath} doesn't exist. Building the front-end now...");

    // Native Bash command: ( ( command -v 'node' || [[ -n "${!1}" ]] ) &> /dev/null; if (( $? == 0 )); then echo 'NodeJS is installed'; fi; )
    String nodeJsIsInstalledStdOut = cliCmd("command -v node");
    boolean nodeJsIsInstalled = nodeJsIsInstalledStdOut != null && nodeJsIsInstalledStdOut.length() > 0;

    if (!nodeJsIsInstalled) {
        println "Installing NodeJS version ${nodeVersion} using `nvm` via `${repoRootDirPath}/install-nvm.sh`..."

        cliCmd("${repoRootDirPath}/install-nvm.sh ${nodeVersion}");

        println "NodeJS installation successful!"
    }

    File clientDirDeps = new File(clientDirDepsPath);
    boolean clientDepsInstalled = clientDirDeps.exists() && clientDirDeps.list().size() > 0;

    if (!clientDepsInstalled) {
        println("Client-side dependencies directory ${clientDirDepsPath} doesn't exist. Running front-end install now...");

        // Alternative (if async were required): `gradle.taskGraph.afterTask { Task task, TaskState state -> {}}`
        // See:
        //     - Change dir for CLI command: https://discuss.gradle.org/t/change-gradle-working-directory-in-a-standard-operating-system-way-where-gradle-is-launched-and-not-where-the-build-gradle-is-located/7153/10
        String npmInstallStdOut = cliCmd("npm install", "${clientDirPath}");

        println("${npmInstallStdOut}\n");
        println("Front-end install successful!");
    }

    String npmBuildStdOut = cliCmd("npm run build", "${clientDirPath}");;

    println("${npmBuildStdOut}\n");
    println("Front-end build completed successful!");
}

tasks.register("buildFrontend") {
    doLast {
        buildFrontendIfNotPresent();
    }
}


tasks.withType(Copy).all {
    duplicatesStrategy 'include'
}


/**
 * Build, run, etc. all depend on the `compileJava` task.
 * As such, to ensure the front-end was built before attempting to run the server,
 * it needs to be specified as a dependency.
 *
 * Note: This is different than `doFirst` in that `dependsOn` runs before the "configuration"
 * lifecycle method (what's run in the top-level of a task) which is run before the "doFirst"
 * lifecycle method.
 *
 * Also, the syntax here is just the new/recommended syntax rather than just plain name-declarations
 * at the top-level of the file.
 */

/**
 * {@inheritDoc}
 */
tasks.register("preCompile") {
    dependsOn "buildFrontend";  // Same as `tasks.<my-task>.dependsOn([ "someTask" ])`
}

tasks.compileJava.dependsOn([ "preCompile" ]);


/**
 * Note: Allow the Spring tasks to be eagerly-loaded since they they are in Spring itself.
 * Also, {@code tasks.register()} doesn't allow overriding tasks.
 */

/**
 * {@inheritDoc}
 */
bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

tasks.run.dependsOn([ "bootRun" ]);

/**
 * {@inheritDoc}
 * WAR is needed because JAR doesn't include {@link resources.public resources/public/}
 * Spring disables {@code war} task and replaces it with {@code bootWar}
 */
bootWar {
    archiveBaseName = project.name
    archiveVersion = project.version

    if (injectJavaFxJar.toBoolean()) {
        /*
         * Add JavaFX's .jar file to classpath to bundle it with the app.
         *
         * Allows website hosting systems that don't support JavaFX to
         * run this webapp.
         *
         * Could also be done in dependencies: `implementation project.files(javaFxAbsolutePath)`
         * but was put here instead to keep the actual app's dependencies separated from
         * the dependencies that *should* already be on the host's system.
         */
        def javaFxAbsolutePath = getJavaFxJarPath()
        classpath(javaFxAbsolutePath)
        println("Injected JavaFX .jar file to dependencies from ${javaFxAbsolutePath}")
    }

    doLast {
        copyDbToBuildDir();

        cliCmd("chmod 777 ${warOutputDir}/*")
    }
}

/**
 * Not used, but this code would create a JAR file instead of a WAR file.
 * JAR files can run by themselves whereas WAR files require running in a Tomcat container.
 *
 * <pre>
 * bootJar {
 *     archiveBaseName = project.name
 *     archiveVersion = project.version
 * }
 * </pre>
 */

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}


/**
 * {@inheritDoc}
 * Configures JavaDoc generation by specifying the main class and the app's {@code classpath}.
 *
 * @see <a href="https://stackoverflow.com/questions/45997976/how-generate-javadoc-with-gradle">StackOverflow post</a>
 */
javadoc {
    source = sourceSets.main.allJava
    // classpath = configurations.compile
}

/**
 * {@inheritDoc}
 * Run specific test using {@code gradle test --tests <TestClassName, e.g. _11_>}
 */
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

tasks.register("wrapperVersion") {
    doLast {
        String allGradleVersionsResponse = cliCmd("curl -fsSL 'https://gradle.org/releases' | grep -Eo 'v([0-9]+\\.){1,3}[0-9]*\\W' | sed -E 's/^v([0-9\\.]*).?\$/\\1/' | sort -Vur");
        List<String> allGradleVersions = allGradleVersionsResponse.split("\n");
        println("allGradleVersionsResponse: ${allGradleVersionsResponse}")

        String wrapperVersionNumber = allGradleVersions.get(0);

        if (project.hasProperty("v")) {
            wrapperVersionNumber = project.getProperty("v");
        } else if (System.hasProperty("v")) {
            wrapperVersionNumber = System.getProperty("v");
        }

        println("Upgrading Gradle wrapper to v${wrapperVersionNumber}");
        // See: https://gradle.org/install#with-the-gradle-wrapper
        cliCmd("./gradlew wrapper --distribution-type=bin --gradle-version=${wrapperVersionNumber}")
    }
}
