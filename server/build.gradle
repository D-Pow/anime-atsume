plugins {
    id 'java'
    id 'idea'
    id 'war'
    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group 'org.animeatsume'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task printVersion {
    println rootProject.artifacts
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok'

    /*
     * Need a webdriver library to load and scrape Kissanime pages.
     * Options for webdriver libraries: https://gist.github.com/alexislucena/ce3bdccf334f5cd0da41920725947b5c
     *
     * Decided to use [ui4j](https://webfolderio.github.io/ui4j/) because it's lightweight
     * in comparison to Selenium and uses native Java unlike PhantomJS.
     * Using v3.0.0 because it ironically has more features than 4.0.0
     * (see https://github.com/webfolderio/ui4j/tree/3.0.0)
     */
    implementation 'io.webfolder:ui4j-webkit:3.0.0'
//    implementation 'mysql:mysql-connector-java'
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation 'com.github.gwenn:sqlite-dialect:0.1.0'

    // Heroku doesn't support JavaFX natively, so add it manually
    // Single RedHat-made JavaFX package
//   implementation 'org.wildfly.swarm:javafx:2018.5.0'
    // OpenJFX which requires installing each piece separately
//    implementation 'org.openjfx:javafx:15-ea+6'
//    implementation 'org.openjfx:javafx-base:15-ea+6'
//    implementation 'org.openjfx:javafx-web:15-ea+6'
//    implementation 'org.openjfx:javafx-fxml:15-ea+6'
//    implementation 'org.openjfx:javafx-graphics:15-ea+6'
//    implementation 'org.openjfx:javafx-controls:15-ea+6'


    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}

def getJavaFxJarPath() {
    /*
     * Alternatively, try an automated (not hard-coded) search using the
     * method found [here](http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin)
     *
     * Note that the system env for JAVA_HOME is used here instead of
     * the gradle property `System.properties['java.home']` because
     * gradle's java.home outputs `JAVA_HOME/jre`
     *
     * Note that this doesn't include the ANT JavaFX .jar packager tools.
     * Those help make a .jar file double-click-able, digitally sign apps,
     * and other random things that aren't likely needed for this app.
     */
    String JAVA_HOME = System.getenv("JAVA_HOME");
    String javaFxRelativePath = "/jre/lib/jfxrt.jar";
    String javaFxAbsolutePath = file(JAVA_HOME + javaFxRelativePath).absolutePath

    return javaFxAbsolutePath;
}

// WAR is needed because JAR doesn't include resources/public/
// Spring disables `war` task and replaces it with `bootWar`
bootWar {
    archiveBaseName = project.name
    archiveVersion = project.version

    /*
     * Add JavaFX's .jar file to classpath to bundle it with the app.
     *
     * Allows website hosting systems that don't support JavaFX to
     * run this webapp.
     *
     * Could also be done in dependencies: `implementation project.files(javaFxAbsolutePath)`
     * but was put here instead to keep the actual app's dependencies separated from
     * the dependencies that *should* already be on the host's system.
     */
    def javaFxAbsolutePath = getJavaFxJarPath()
    classpath(javaFxAbsolutePath)
    println("Injected JavaFX .jar file to dependencies from ${javaFxAbsolutePath}")
}

// Creates a JAR that can run by itself instead of a WAR that requires running in a Tomcat container
//bootJar {
//    archiveBaseName = project.name
//    archiveVersion = project.version
//}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

//Run specific test using `gradle test --tests <TestClassName, e.g. _11_>`
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

wrapper {
    gradleVersion = '6.5'
    distributionType = Wrapper.DistributionType.ALL
}
