{
    /**
     * Use `tsc -b config.json` instead of `-p` because it has more features,
     * e.g. respecting project properties, only updating files that have changed, etc.
     * See: https://www.typescriptlang.org/docs/handbook/project-references.html#build-mode-for-typescript
     * Exception: To specify other flags (e.g. --outDir), you must use `-p`.
     *
     * TS options:
     * Config file: https://www.typescriptlang.org/tsconfig
     * CLI: https://www.typescriptlang.org/docs/handbook/compiler-options.html
     *
     * Walkthrough that's pretty old
     * https://dev.to/open-wc/generating-typescript-definition-files-from-javascript-5bp2
     */
    "compilerOptions": {
        "target": "ESNext", // target environment to transpile down to; since we're using webpack/babel, do not transpile resulting JS b/c babel does a better job
        // Note: If `target >= ES2022|ESNext`, then `useDefineForClassFields` is set to `true` by default in order
        // to use native class properties instead of TS v3.7 constructor initialization.
        "lib": [
            "ESNext", // modern JS features
            "DOM", // DOM features like HTMLElement, NodeList, fetch, XMLHttpRequest, etc.
            "DOM.Iterable" // Additional entries for `[Symbol.iterator]()`, `entries()`, etc. for DOM classes/types
        ],
        "module": "ESNext", // how resulting tsc output module(s) will be imported by those who install our library; UMD for both node & browsers
        "moduleResolution": "Node", // use `import` instead of `require`
        "strict": true, // error if there's a type mismatch or dangerous code (e.g. assuming `this` in `function` instead of in `() => {}`).
        "jsx": "react-jsx", // how to handle JSX tags: "react" => `createElement()`,  "react-jsx" => `_jsx()`, "preserve" => `<MyComp />`
        "allowJs": true, // allows .js(x) files instead of only .ts(x)
        //        "checkJs": true, // allows TS to check code imported from JS files for type accuracy, both from `lib` and JSDoc (e.g. `location.href = 5` and `/** @type {number} */ const x = 'hi'` throw errors)
        // Not used currently b/c many things throw superfluous errors, including undefined `useState()` values, dynamic component imports don't match expected types, etc.
        "skipLibCheck": true, // skip checking typings.d.ts files for JS imports (useful in case the same type is defined in different node_modules libs)
        "esModuleInterop": true, // allows `import * as UserDefinedNamespace from 'my-module'`
        "allowSyntheticDefaultImports": true, // allow imports of default exports even if .js files instead of .ts. Automatically activated if esModuleInterop is true
        "experimentalDecorators": true, // allows use of `@decorator` syntax
        "emitDecoratorMetadata": true, // adds useful additional information to decorators (see: https://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically/64169429#64169429)
        "resolveJsonModule": true, // allow importing json files
        "forceConsistentCasingInFileNames": true, // Ensure file names and references maintain the same casing scheme (e.g. `import './myFile'` fails if file name is `MyFile.ts`)
        "newLine": "lf", // Ensure emitted files (.d.ts and .js) use LF for newlines
        "preserveSymlinks": false, // Makes symlinks resolve to the actual file instead of the symlink itself (Note: Might cause issues with `npm link`). See: https://www.typescriptlang.org/tsconfig#preserveSymlinks and https://webpack.js.org/configuration/resolve/#resolvesymlinks
        "incremental": true, // Saves info from each build to a file in the output dir to allow for faster subsequent builds (e.g. don't rebuild this file if it hasn't changed)
        "isolatedModules": true, // make compatible with other typescript-processing plugins, e.g. babel, webpack, etc.
        "outDir": "dist", // Output dir of running `npx tsc`; don't use if using webpack/ts-loader, or override it manually in ts-loader options
        "declaration": true, // Generates typings.d.ts files
        "declarationDir": "dist/types", // Output dir for types
        //        "removeComments": true, // Removes comments from output
        //        "emitDeclarationOnly": true, // Only output `.d.ts` files
        //        "noEmit": true, // don't emit outputs
        //        "listFiles": true, // Prints all files imported by your code as well as your code. "listEmittedFiles" only shows output files.
        //        "rootDir": ".", // Parent directory from which all transpiled code will be relative when outputted within `outDir`.
        // e.g. If transpiling `<root>/src/*` with `outDir: dist`, then:
        //    `rootDir: .`  =>  dist/src/*
        //    `rootDir: undefined`  =>  dist/*
        // Not usually needed since the `rootDir` is interpreted by the `include`, `exclude`, and `files` entries.
        // Doesn't impact other path-resolution configs, like `include`, `exclude`, `files`, etc.
        "baseUrl": ".", // sets the base dir of source code import path prefixes (typescript's equivalent of NODE_PATH); doesn't affect tsconfig's paths
        "paths": {
            "@/*": [ "src/*" ],
            "~/*": [ "*" ]
        }
    },
    "include": [
        "./src/**/*"
    ],
    "exclude": [
        "./node_modules",
        "dist"
    ],
}
